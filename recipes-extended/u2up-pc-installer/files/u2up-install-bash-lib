#!/bin/bash
#
# A u2up-yocto instalation/upgrade bash library
#
#set -xe

U2UP_INSTALL_BASH_LIB_SOURCED=yes

############################
#                          #
# Common U2UP definitions! #
#                          #
############################
U2UP_CONF_DIR="/etc/u2up-conf.d"
if [ ! -d "${U2UP_CONF_DIR}" ]; then
	rm -rf $U2UP_CONF_DIR
	mkdir -p $U2UP_CONF_DIR
fi

U2UP_IDS_CONF_FILE="00-u2up_ids-conf"
U2UP_KEYMAP_CONF_FILE="10-keymap-conf"
U2UP_TARGET_DISK_CONF_FILE="20-target_disk-conf"
U2UP_TARGET_HOSTNAME_CONF_FILE="30-hostname-conf"
U2UP_TARGET_ADMIN_CONF_FILE="40-admin-conf"
U2UP_NETWORK_EXTERNAL_CONF_FILE="50-network_external-conf"
U2UP_NETWORK_INTERNAL_CONF_FILE="60-network_internal-conf"
U2UP_NETWORK_HOME_CONF_FILE="65-network_home-conf"
U2UP_INSTALL_REPO_CONF_FILE="70-install_repo-conf"
U2UP_DOMAIN_CONF_FILE="80-domain-conf"
U2UP_ACME_ACCOUNT_CONF_FILE="90-acme_account-conf"

# Use common partition to download images bundle:
U2UP_IMAGES_DIR="/var/log/u2up-images"
U2UP_IMAGES_LOCAL_DIR="/var/lib/u2up-images"

U2UP_IMAGES_BUNDLE_NAME="u2up-homegw-bundle"
U2UP_IMAGES_BUNDLE_ARCHIVE=${U2UP_IMAGES_BUNDLE_NAME}.tar
U2UP_IMAGES_BUNDLE_ARCHIVE_SUM=${U2UP_IMAGES_BUNDLE_NAME}.tar.sha256

#U2UP_FS_IMAGE_ARCHIVE=u2up-homegw-image-full-cmdline
U2UP_IMAGE_ROOTFS_NAME=""
U2UP_IMAGE_ROOTFS_DATETIME=""
#U2UP_KERNEL_MODULES_ARCHIVE=modules
U2UP_KERNEL_IMAGE=bzImage
U2UP_INITRD_IMAGE=microcode
U2UP_EFI_FALLBACK_IMAGE=bootx64.efi

MACHINE="intel-corei7-64"

U2UP_TMP_BOOT_DIR="/tmp/boot"
U2UP_INSTALL_ROOT_MNT="/mnt"
U2UP_TMP_SRV_DIR="/tmp/srv"
U2UP_TEMP_DIR="/tmp/u2up-temp"
if [ ! -d "${U2UP_TEMP_DIR}" ]; then
	rm -rf $U2UP_TEMP_DIR
	mkdir -p $U2UP_TEMP_DIR
fi
U2UP_TARGET_DISK_SFDISK_BASH=${U2UP_TEMP_DIR}/u2up_target_disk-sfdisk_bash
U2UP_TARGET_DISK_SFDISK_DUMP=${U2UP_TEMP_DIR}/u2up_target_disk-sfdisk_dump

PART_TYPE_EFI="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
PART_TYPE_LINUX="0FC63DAF-8483-4772-8E79-3D69D8477DE4"

######################################
#                                    #
# U2UP target MISC helper functions! #
#                                    #
######################################
move_and_sort() {
	local rv=0

	if [ -z "${1}" ] || [ -z "${2}" ]; then
		return 1
	fi
	cat $1 | sort > $2
	rv=$?
	if [ $rv -eq 0 ]; then
		rm -f $1
		rv=$?
	fi
	sed -i '/^$/d' $2
	return $rv
}

######################################
#                                    #
# U2UP target ROOT helper functions! #
#                                    #
######################################
get_current_target_disk() {
	if [ -f "${U2UP_CONF_DIR}/${U2UP_TARGET_DISK_CONF_FILE}" ]; then
		source $U2UP_CONF_DIR/$U2UP_TARGET_DISK_CONF_FILE
		echo -n "${u2up_TARGET_DISK}"
	fi
}

get_current_target_part() {
	if [ -f "${U2UP_CONF_DIR}/${U2UP_TARGET_DISK_CONF_FILE}" ]; then
		source $U2UP_CONF_DIR/$U2UP_TARGET_DISK_CONF_FILE
		echo -n "${u2up_TARGET_PART}"
	fi
}

get_root_label_suffix() {
	local target_disk=$1
	local target_part=$2
	if [ -n "${target_part}" ]; then
		case ${target_part} in
		${target_disk}3)
			echo "A"
			return 0
			;;
		${target_disk}4)
			echo "B"
			return 0
			;;
		esac
	fi
	return 1
}

get_root_label_from_suffix() {
	local label_suffix=$1
	if [ -n "${label_suffix}" ]; then
		case ${label_suffix} in
		A|B)
			echo -n "root${label_suffix}"
			return 0
			;;
		esac
	fi
	return 1
}

get_root_label_suffix_from_label() {
	local label=$1
	if [ -n "${label}" ]; then
		case ${label} in
		rootA)
			echo "A"
			return 0
			;;
		rootB)
			echo "B"
			return 0
			;;
		esac
	fi
	return 1
}

get_root_label() {
	local label=""
	local target_disk=$1
	local target_part=$2
	local label_suffix="$(get_root_label_suffix ${target_disk} ${target_part})"
	if [ -n "${label_suffix}" ]; then
		label="$(get_root_label_from_suffix ${label_suffix})"
		if [ -n "${label}" ]; then
			echo -n "${label}"
			return 0
		fi
	fi
	return 1
}

#set_target_done_for() {
#	local file=${1}
#	local new_target_done=${2:-0}
#	local rv=1
#	if [ -z "$file" ] || [ ! -e "$file" ]; then
#		return $rv
#	fi
#	if [ -e "${file}" ]; then
#		cat ${file} | grep -v "TARGET_DONE=" > ${file}_tmp
#		rv=$?
#	fi
#	echo "TARGET_DONE=${new_target_done}" >> ${file}_tmp
#	(( rv+=$? ))
#	move_and_sort ${file}_tmp ${file}
#	(( rv+=$? ))
#	return $rv
#}

update_hosts_file() {
	local rv=0
	local hosts_file="/etc/hosts"
	local conf_dir=${1:-${U2UP_CONF_DIR}}
	local names=""
	local net_addr=""

	if [ -f "${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}
	fi
	if [ -z "$u2up_TARGET_HOSTNAME" ]; then
		rv=1
	fi
	if [ $rv -eq 0 ]; then
		names="${u2up_TARGET_HOSTNAME}"
		if [ -f "${hosts_file}" ]; then
			cat $hosts_file | grep -v "${u2up_TARGET_HOSTNAME}" > ${hosts_file}_tmp
			rv=$?
		else
			> ${hosts_file}_tmp
			rv=$?
		fi
		echo >> ${hosts_file}_tmp
		(( rv+=$? ))
	fi
	if [ $rv -eq 0 ] && [ -f "${conf_dir}/${U2UP_DOMAIN_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_DOMAIN_CONF_FILE}
		if [ -n "u2up_LOCAL_DOMAIN" ]; then
			names="${u2up_TARGET_HOSTNAME}.${u2up_LOCAL_DOMAIN}\t${u2up_TARGET_HOSTNAME}"
		fi
	fi
	if [ $rv -eq 0 ] && [ -f "${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}
		if [ -n "$u2up_NET_EXTERNAL_ADDR_MASK" ]; then
			net_addr=$(echo -n "${u2up_NET_EXTERNAL_ADDR_MASK}" | sed 's|\/.*||g')
			if [ -n "${net_addr}" ]; then
				echo -e "${net_addr}\t${names}" >> ${hosts_file}_tmp
				rv=$?
			fi
		fi
	fi
	if [ $rv -eq 0 ] && [ -f "${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}
		if [ -n "$u2up_NET_INTERNAL_ADDR_MASK" ]; then
			net_addr=$(echo -n "${u2up_NET_INTERNAL_ADDR_MASK}" | sed 's|\/.*||g')
			if [ -n "${net_addr}" ]; then
				echo -e "${net_addr}\t${names}" >> ${hosts_file}_tmp
				rv=$?
			fi
		fi
	fi
	if [ $rv -eq 0 ] && [ -f "${conf_dir}/${U2UP_NETWORK_HOME_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_NETWORK_HOME_CONF_FILE}
		if [ -n "$u2up_NET_HOME_ADDR_MASK" ]; then
			net_addr=$(echo -n "${u2up_NET_HOME_ADDR_MASK}" | sed 's|\/.*||g')
			if [ -n "${net_addr}" ]; then
				echo -e "${net_addr}\t${names}" >> ${hosts_file}_tmp
				rv=$?
			fi
		fi
	fi
	if [ $rv -eq 0 ]; then
		mv ${hosts_file}_tmp $hosts_file
		rv=$?
	fi
	return $rv
}

######################################
#                                    #
# U2UP target BOOT helper functions! #
#                                    #
######################################
get_boot_label() {
	local boot_label=$1
	local boot_label_conf=
	if [ -z "${boot_label}" ]; then
		return
	fi
	boot_label_conf="${U2UP_TMP_BOOT_DIR}/loader/entries/${boot_label}.conf"
	if [ ! -f "${boot_label_conf}" ]; then
		return
	fi
	cat ${boot_label_conf} | grep title | sed 's/.*title[ ]*//g'
}

get_default_boot_label() {
	local default_boot_conf=""
	local target_disk=$1

	if [ -z "${target_disk}" ]; then
		return
	fi
	umount -f ${U2UP_TMP_BOOT_DIR} 2> /dev/null
	mkdir -p ${U2UP_TMP_BOOT_DIR}
	mount -t vfat -o umask=0077 /dev/${target_disk}1 ${U2UP_TMP_BOOT_DIR} >&2
	if [ $? -ne 0 ]; then
		echo "Failed to mount \"${U2UP_TMP_BOOT_DIR}\"!" >&2
		return
	fi
	echo "Successfully mounted \"${U2UP_TMP_BOOT_DIR}\"!" >&2
	if [ ! -f "${U2UP_TMP_BOOT_DIR}/loader/loader.conf" ]; then
		return
	fi
	default_boot_conf="${U2UP_TMP_BOOT_DIR}/loader/entries/$(cat ${U2UP_TMP_BOOT_DIR}/loader/loader.conf | grep "default" | sed 's/default //g').conf"
	if [ ! -f "${default_boot_conf}" ]; then
		return
	fi
	cat ${default_boot_conf} | grep title | sed 's/.*title[ ]*//g'
}

set_default_boot() {
	local rv=0
	local new_boot_label=$1

	if [ -z "${new_boot_label}" ]; then
		return 1
	fi
	if [ ! -f "${U2UP_TMP_BOOT_DIR}/loader/entries/${new_boot_label}.conf" ]; then
		return 1
	fi
	echo "default ${new_boot_label}" > ${U2UP_TMP_BOOT_DIR}/loader/loader.conf
	(( rv+=$? ))
	echo "timeout 5" >> ${U2UP_TMP_BOOT_DIR}/loader/loader.conf
	(( rv+=$? ))
	return $rv
}

create_new_boot() {
	local rv=0
	local root_part_label=$1
	local root_part_label_suffix=$2
	local root_part_uuid=$3

	if [ -z "${root_part_label}" ] || [ -z "${root_part_label_suffix}" ] || [ -z "${root_part_uuid}" ]; then
		return 1
	fi
	if [ ! -f "${U2UP_CONF_DIR}/${U2UP_IDS_CONF_FILE}" ]; then
		echo "Program terminated (missing: ${U2UP_CONF_DIR}/${U2UP_IDS_CONF_FILE})!" >&2
		return 1
	fi
	source ${U2UP_CONF_DIR}/${U2UP_IDS_CONF_FILE}
	rv=$?
	echo "title ${root_part_label} (${u2up_ROOTFS_DATETIME})" > ${U2UP_TMP_BOOT_DIR}/loader/entries/${root_part_label}.conf
	((rv+=$?))
	echo "linux /bzImage${root_part_label_suffix}" >> ${U2UP_TMP_BOOT_DIR}/loader/entries/${root_part_label}.conf
	((rv+=$?))
	echo "options label=${root_part_label} root=PARTUUID=${root_part_uuid} rootwait rootfstype=ext4 console=tty0 ttyprintk.tioccons=1" >> ${U2UP_TMP_BOOT_DIR}/loader/entries/${root_part_label}.conf
	((rv+=$?))
	echo "initrd /microcode${root_part_label_suffix}.cpio" >> ${U2UP_TMP_BOOT_DIR}/loader/entries/${root_part_label}.conf
	((rv+=$?))
	return $rv
}

############################################
#                                          #
# CHECK functions for U2UP configurations! #
#                                          #
############################################
check_net_external_ifname_set() {
	local conf_dir=${1}

	if [ -f "${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}
	else
		u2up_NET_EXTERNAL_IFNAME=""
	fi
	if [ -z "$u2up_NET_EXTERNAL_IFNAME" ]; then
		return 1
	fi
}

check_net_internal_ifname_set() {
	local conf_dir=${1}

	if [ -f "${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}
	else
		u2up_NET_INTERNAL_IFNAME=""
	fi
	if [ -z "$u2up_NET_INTERNAL_IFNAME" ]; then
		return 1
	fi
}

##########################################
#                                        #
# GET functions for U2UP configurations! #
#                                        #
##########################################
get_net_segment_ifname_set() {
	local conf_dir=${1}
	local net_segment_name=${2}

	case $net_segment_name in
	External)
		if [ -f "${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}" ]; then
			source ${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}
			echo -n $u2up_NET_EXTERNAL_IFNAME
		fi
		;;
	Internal)
		if [ -f "${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}" ]; then
			source ${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}
			echo -n $u2up_NET_INTERNAL_IFNAME
		fi
		;;
	Home)
		if [ -f "${conf_dir}/${U2UP_NETWORK_HOME_CONF_FILE}" ]; then
			source ${conf_dir}/${U2UP_NETWORK_HOME_CONF_FILE}
			echo -n $u2up_NET_HOME_IFNAME
		fi
		;;
	*)
		;;
	esac
}

###########################################
#                                         #
# SAVE functions for U2UP configurations! #
#                                         #
###########################################
save_u2up_keymap_selection() {
	local rv=1
	local keymap=$1
	local conf_dir=${2:-${U2UP_CONF_DIR}}

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -n "$keymap" ]; then
		loadkeys -p $keymap 2> /dev/null
		rv=$?
		if [ $rv -eq 0 ]; then
			echo "local u2up_KEYMAP=$keymap" > ${conf_dir}/${U2UP_KEYMAP_CONF_FILE}
		fi
	fi
	return $rv
}

save_u2up_target_disk_selection() {
	local rv=1
	local disk=$1
	local conf_dir=${2:-${U2UP_CONF_DIR}}

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -f "${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}" ]; then
		cat ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE} | grep -v "u2up_TARGET_DISK=" > ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
		rv=$?
	else
		> ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ] && [ -n "$disk" ]; then
		echo "local u2up_TARGET_DISK=$disk" >> ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
	else
		return 1
	fi
	move_and_sort ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}
	rv=$?
	return $rv
}

save_u2up_target_part_selection() {
	local rv=1
	local part=$1
	local conf_dir=${2:-${U2UP_CONF_DIR}}

	if [ -f "${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}" ]; then
		cat ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE} | grep -v "u2up_TARGET_PART=" > ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
		rv=$?
	else
		> ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ] && [ -n "$part" ]; then
		echo "local u2up_TARGET_PART=$part" >> ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
	else
		return 1
	fi
	move_and_sort ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}
	rv=$?
	return $rv
}

save_u2up_target_partsize_selection() {
	local rv=1
	local var_target_partsz_set=""
	local var_target_partsz_current=""
	local conf_dir=${1}
	shift
	local part=$(echo $@ | sed 's/RENAMED //' | sed 's/ .*//')
	declare -i part_size=$(echo $@ | sed 's/.*://')

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ $part_size -le 0 ]; then
		return 1
	fi
	case $part in
	boot)
		var_target_partsz_set=u2up_TARGET_BOOT_PARTSZ
		var_target_partsz_current=target_boot_partsz_current
		;;
	log)
		var_target_partsz_set=u2up_TARGET_LOG_PARTSZ
		var_target_partsz_current=target_log_partsz_current
		;;
	rootA)
		var_target_partsz_set=u2up_TARGET_ROOTA_PARTSZ
		var_target_partsz_current=target_rootA_partsz_current
		;;
	rootB)
		var_target_partsz_set=u2up_TARGET_ROOTB_PARTSZ
		var_target_partsz_current=target_rootB_partsz_current
		;;
	*)
		return 1;
	esac

	if [ -f "${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}" ]; then
		cat ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE} | grep -v "${var_target_partsz_set}=" > ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
		rv=$?
	else
		> ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0]; then
		echo "local ${var_target_partsz_set}=$part_size" >> ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0]; then
		move_and_sort ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}_tmp ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}
		rv=$?
	fi
	if [ $rv -eq 0]; then
		echo "${var_target_partsz_current}=${part_size}"
	fi
	return $rv
}

save_u2up_net_segment_iface_selection() {
	local conf_dir=$1
	local net_segment_name=$2
	local ifname=$3
	local rv=0
	local net_segment_conf_file=""
	local net_segment_conf_var=""

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	case $net_segment_name in
	External)
		net_segment_conf_file=$U2UP_NETWORK_EXTERNAL_CONF_FILE
		net_segment_conf_var="u2up_NET_EXTERNAL_IFNAME"
		;;
	Internal)
		net_segment_conf_file=$U2UP_NETWORK_INTERNAL_CONF_FILE
		net_segment_conf_var="u2up_NET_INTERNAL_IFNAME"
		;;
	Home)
		net_segment_conf_file=$U2UP_NETWORK_HOME_CONF_FILE
		net_segment_conf_var="u2up_NET_HOME_IFNAME"
		;;
	*)
		return 1
		;;
	esac
	if [ -f "${conf_dir}/${net_segment_conf_file}" ]; then
		cat ${conf_dir}/${net_segment_conf_file} | grep -v "${net_segment_conf_var}=" > ${conf_dir}/${net_segment_conf_file}_tmp
		rv=$?
	else
		> ${conf_dir}/${net_segment_conf_file}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ] && [ -n "$ifname" ]; then
		if [ "$ifname" != "none" ]; then
			echo "local ${net_segment_conf_var}=$ifname" >> ${conf_dir}/${net_segment_conf_file}_tmp
		else
			echo "local ${net_segment_conf_var}=" >> ${conf_dir}/${net_segment_conf_file}_tmp
		fi
	else
		return 1
	fi
	move_and_sort ${conf_dir}/${net_segment_conf_file}_tmp ${conf_dir}/${net_segment_conf_file}
	rv=$?
	return $rv
}

save_u2up_net_segment_mac_selection() {
	local conf_dir=$1
	local net_segment_name=$2
	local mac=$3
	local rv=0
	local net_segment_conf_file=""
	local net_segment_conf_var=""

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	case $net_segment_name in
	External)
		net_segment_conf_file=$U2UP_NETWORK_EXTERNAL_CONF_FILE
		net_segment_conf_var="u2up_NET_EXTERNAL_MAC_ADDR"
		;;
	Internal)
		net_segment_conf_file=$U2UP_NETWORK_INTERNAL_CONF_FILE
		net_segment_conf_var="u2up_NET_INTERNAL_MAC_ADDR"
		;;
	Home)
		net_segment_conf_file=$U2UP_NETWORK_HOME_CONF_FILE
		net_segment_conf_var="u2up_NET_HOME_MAC_ADDR"
		;;
	*)
		return 1
		;;
	esac
	if [ -f "${conf_dir}/${net_segment_conf_file}" ]; then
		cat ${conf_dir}/${net_segment_conf_file} | grep -v "${net_segment_conf_var}=" > ${conf_dir}/${net_segment_conf_file}_tmp
		rv=$?
	else
		> ${conf_dir}/${net_segment_conf_file}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ] && [ -n "$mac" ]; then
		if [ "$mac" != "none" ]; then
			echo "local ${net_segment_conf_var}=$mac" >> ${conf_dir}/${net_segment_conf_file}_tmp
		else
			echo "local ${net_segment_conf_var}=" >> ${conf_dir}/${net_segment_conf_file}_tmp
		fi
	else
		return 1
	fi
	move_and_sort ${conf_dir}/${net_segment_conf_file}_tmp ${conf_dir}/${net_segment_conf_file}
	rv=$?
	return $rv
}

save_u2up_target_hostname_selection() {
	local rv=1
	local var_target_hostname_set=""
	local var_target_hostname_current=""
	local conf_dir=${1}
	shift
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"Hostname")
		var_target_hostname_set=u2up_TARGET_HOSTNAME
		var_target_hostname_current=target_hostname_current
		;;
	*)
		return 1;
	esac

	if [ -f "${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}" ]; then
		cat ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE} | grep -v "${var_target_hostname_set}=" > ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}_tmp
		rv=$?
	else
		> ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		echo "local ${var_target_hostname_set}=$value" >> ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		move_and_sort ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}_tmp ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}
		rv=$?
	fi
	if [ $rv -eq 0]; then
		echo "${var_target_hostname_current}=${value}"
	fi
	return $rv
}

save_u2up_target_admin_selection() {
	local rv=1
	local var_target_admin_name_set=""
	local var_target_admin_name_current=""
	local conf_dir=${1}
	shift
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"Admin name")
		var_target_admin_name_set=u2up_TARGET_ADMIN_NAME
		var_target_admin_name_current=target_admin_name_current
		;;
	*)
		return 1;
	esac

	if [ -f "${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}" ]; then
		cat ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE} | grep -v "${var_target_admin_name_set}=" > ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}_tmp
		rv=$?
	else
		> ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0]; then
		echo "local ${var_target_admin_name_set}=$value" >> ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0]; then
		move_and_sort ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}_tmp ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}
		rv=$?
	fi
	if [ $rv -eq 0]; then
		echo "${var_target_admin_name_current}=${value}"
	fi
	return $rv
}

save_u2up_net_segment_config_selection() {
	local rv=1
	local var_net_config_set=""
	local var_net_config_current=""
	local conf_dir=${1}
	shift
	local net_segment_name=${1}
	shift
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"
	local net_segment_conf_file=""
	local net_segment_conf_var=""

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $net_segment_name in
	External)
		net_segment_conf_file=$U2UP_NETWORK_EXTERNAL_CONF_FILE
		case $name in
		"MAC address")
			var_net_config_set=u2up_NET_EXTERNAL_MAC_ADDR
			var_net_config_current=net_external_mac_addr_current
			;;
		"IP address/mask")
			var_net_config_set=u2up_NET_EXTERNAL_ADDR_MASK
			var_net_config_current=net_external_addr_mask_current
			;;
		"IP gateway")
			var_net_config_set=u2up_NET_EXTERNAL_GW
			var_net_config_current=net_external_gw_current
			;;
		*)
			return 1;
		esac
		;;
	Internal)
		net_segment_conf_file=$U2UP_NETWORK_INTERNAL_CONF_FILE
		case $name in
		"MAC address")
			var_net_config_set=u2up_NET_INTERNAL_MAC_ADDR
			var_net_config_current=net_internal_mac_addr_current
			;;
		"IP address/mask")
			var_net_config_set=u2up_NET_INTERNAL_ADDR_MASK
			var_net_config_current=net_internal_addr_mask_current
			;;
		"IP gateway")
			var_net_config_set=u2up_NET_INTERNAL_GW
			var_net_config_current=net_internal_gw_current
			;;
		*)
			return 1;
		esac
		;;
	Home)
		net_segment_conf_file=$U2UP_NETWORK_HOME_CONF_FILE
		case $name in
		"MAC address")
			var_net_config_set=u2up_NET_HOME_MAC_ADDR
			var_net_config_current=net_home_mac_addr_current
			;;
		"IP address/mask")
			var_net_config_set=u2up_NET_HOME_ADDR_MASK
			var_net_config_current=net_home_addr_mask_current
			;;
		"IP gateway")
			var_net_config_set=u2up_NET_HOME_GW
			var_net_config_current=net_home_gw_current
			;;
		*)
			return 1;
		esac
		;;
	*)
		return 1
		;;
	esac

	if [ -f "${conf_dir}/${net_segment_conf_file}" ]; then
		cat ${conf_dir}/${net_segment_conf_file} | grep -v "${var_net_config_set}=" > ${conf_dir}/${net_segment_conf_file}_tmp
		rv=$?
	else
		> ${conf_dir}/${net_segment_conf_file}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		echo "local ${var_net_config_set}=$value" >> ${conf_dir}/${net_segment_conf_file}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		move_and_sort ${conf_dir}/${net_segment_conf_file}_tmp ${conf_dir}/${net_segment_conf_file}
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		echo "${var_net_config_current}=${value}"
	fi
	return $rv
}

save_u2up_install_repo_selection() {
	local rv=1
	local var_install_repo_set=""
	local var_install_repo_current=""
	local conf_dir=${1}
	shift
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"Base URL")
		var_install_repo_set=u2up_INSTALL_REPO_BASE_URL
		var_install_repo_current=install_repo_base_url_current
		;;
	*)
		return 1;
	esac

	if [ -f "${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}" ]; then
		cat ${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE} | grep -v "${var_install_repo_set}=" > ${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}_tmp
		rv=$?
	else
		> ${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		echo "local ${var_install_repo_set}=$value" >> ${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		move_and_sort ${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}_tmp ${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		echo "${var_install_repo_current}=${value}"
	fi
	return $rv
}

save_u2up_local_domain_selection() {
	local rv=1
	local var_domain_config_set=""
	local var_domain_config_current=""
	local conf_dir=${1}
	shift
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"Local Domain")
		var_domain_config_set=u2up_LOCAL_DOMAIN
		var_domain_config_current=local_domain_current
		;;
	"Forward DNS1")
		var_domain_config_set=u2up_FORWARD_DNS1
		var_domain_config_current=forward_dns1_current
		;;
	"Forward DNS2")
		var_domain_config_set=u2up_FORWARD_DNS2
		var_domain_config_current=forward_dns2_current
			;;
	*)
		return 1;
	esac

	if [ -f "${conf_dir}/${U2UP_DOMAIN_CONF_FILE}" ]; then
		cat ${conf_dir}/${U2UP_DOMAIN_CONF_FILE} | grep -v "${var_domain_config_set}=" > ${conf_dir}/${U2UP_DOMAIN_CONF_FILE}_tmp
		rv=$?
	else
		> ${conf_dir}/${U2UP_DOMAIN_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		echo "local ${var_domain_config_set}=$value" >> ${conf_dir}/${U2UP_DOMAIN_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		move_and_sort ${conf_dir}/${U2UP_DOMAIN_CONF_FILE}_tmp ${conf_dir}/${U2UP_DOMAIN_CONF_FILE}
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		echo "${var_domain_config_current}=${value}"
	fi
	return $rv
}

save_u2up_acme_account_email_selection() {
	local rv=1
	local var_acme_account_set=""
	local var_acme_account_current=""
	local conf_dir=${1}
	shift
	local value="$(echo $@ | sed 's/[^:]*://' | sed 's/ *//')"
	local name="$(echo $@ | sed 's/RENAMED //' | sed 's/:.*//')"

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -z "${value}" ] || [ "x${name}" = "x${value}" ]; then
		return 0
	fi
	case $name in
	"Email")
		var_acme_account_set=u2up_ACME_ACCOUNT_EMAIL
		var_acme_account_current=acme_account_email_current
		;;
	*)
		return 1;
	esac

	if [ -f "${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}" ]; then
		if [ -n "$(tail -n1 ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE})" ]; then
			echo >> ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}
		fi
		cat ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE} | grep -v "${var_acme_account_set}=" > ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}_tmp
		rv=$?
	else
		> ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		if [ "${value}" = "none" ]; then
			value=""
		fi
		echo "local ${var_acme_account_set}=$value" >> ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}_tmp
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		move_and_sort ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}_tmp ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}
		rv=$?
	fi
	if [ $rv -eq 0 ]; then
		echo "${var_acme_account_current}=${value}"
	fi
	return $rv
}

############################################
#                                          #
# CONFIGURE functions for U2UP parameters! #
#                                          #
############################################
#
# Configure U2UP defined target keymap.
# (called from installers and chrooted during installation / upgrade)	
# (TODO: locale settings)
#
configure_u2up_keymap_selection() {
	local rv=1
	local conf_dir=${1:-${U2UP_CONF_DIR}}

	if [ ! -f "${conf_dir}/${U2UP_KEYMAP_CONF_FILE}" ]; then
		return 1
	fi
	source ${conf_dir}/${U2UP_KEYMAP_CONF_FILE}
#	if [ -n "$u2up_KEYMAP" ] && [ $TARGET_DONE -eq 0 ]; then
	if [ -n "$u2up_KEYMAP" ]; then
		loadkeys $u2up_KEYMAP
		rv=$?
		if [ $rv -eq 0 ]; then
#			echo "KEYMAP=$u2up_KEYMAP" > /etc/vconsole.conf
			systemd-firstboot --keymap=$u2up_KEYMAP
			rv=$?
#			set_target_done_for ${conf_dir}/${U2UP_KEYMAP_CONF_FILE} ${new_target_done}
#			rv=$?
		fi
	fi
	return $rv
}

#
# Configure U2UP defineed target hostname.
# (called only chrooted during installation / upgrade)	
#
configure_u2up_target_hostname_selection() {
	local rv=1
	local conf_dir=${1:-${U2UP_CONF_DIR}}
	local net_internal_addr=""

	if [ ! -f "${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}" ]; then
		return 1
	fi
	source ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}
#	if [ -n "$u2up_TARGET_HOSTNAME" ] && [ $TARGET_DONE -eq 0 ]; then
	if [ -n "$u2up_TARGET_HOSTNAME" ]; then
#		hostnamectl set-hostname $u2up_TARGET_HOSTNAME
#		systemd-firstboot --hostname=$u2up_TARGET_HOSTNAME
		echo "${u2up_TARGET_HOSTNAME}" > /etc/hostname
		rv=$?
#		if [ $rv -eq 0 ]; then
#			set_target_done_for ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE} ${new_target_done}
#			rv=$?
#		fi
	fi
	if [ $rv -eq 0 ]; then
		update_hosts_file $conf_dir
		rv=$?
	fi
	return $rv
}

#
# Configure U2UP defined target administrator.
# (called only chrooted during installation / upgrade)	
#
configure_u2up_target_admin_selection() {
	local rv=1
	local conf_dir=${1:-${U2UP_CONF_DIR}}

	if [ ! -f "${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}" ]; then
		return 1
	fi
	source ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}
#	if [ -n "$u2up_TARGET_ADMIN_NAME" ] && [ $TARGET_DONE -eq 0 ]; then
	if [ -n "$u2up_TARGET_ADMIN_NAME" ]; then
		useradd -u 1000 -U -m -c "Admin User" $u2up_TARGET_ADMIN_NAME
		rv=$?
		if [ $rv -ne 0 ] && [ $rv -ne 9 ]; then
			return 1
		fi
		systemd-sysusers
		rv=$?
		if [ $rv -ne 0 ]; then
			return 1
		fi
		passwd -de $u2up_TARGET_ADMIN_NAME
		rv=$?
		if [ $rv -ne 0 ]; then
			return 1
		fi
		usermod -aG wheel $u2up_TARGET_ADMIN_NAME
		rv=$?
		if [ $rv -ne 0 ]; then
			return 1
		fi
		# Locking the root account and scrambling its password!
		passwd -l root
		rv=$?
		if [ $rv -ne 0 ]; then
			return 1
		fi
		usermod -p '!' root
		rv=$?
#		if [ $rv -eq 0 ]; then
#			set_target_done_for ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE} ${new_target_done}
#			rv=$?
#		fi
	fi
	return $rv
}

#
# Configure U2UP defined network segment.
# (called chrooted during installation / upgrade)
#
configure_u2up_net_segment() {
	local conf_dir=$1
	local net_segment_name=$2
	local net_segment_addr=""
	local net_segment_zone=""
	local net_segment_id=""
	local net_uuid=""
	local msg=""
	local rv=0
	local net_segment_conf_file=""
	local net_segment_conf_ifname=""
	local net_segment_conf_mac_addr=""
	local net_segment_conf_addr_mask=""
	local net_segment_conf_gw=""

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	case $net_segment_name in
	External)
		net_segment_id="external"
		net_segment_zone="external"
		net_segment_conf_file=$U2UP_NETWORK_EXTERNAL_CONF_FILE
		net_segment_conf_ifname="u2up_NET_EXTERNAL_IFNAME"
		net_segment_conf_mac_addr="u2up_NET_EXTERNAL_MAC_ADDR"
		net_segment_conf_addr_mask="u2up_NET_EXTERNAL_ADDR_MASK"
		net_segment_conf_gw="u2up_NET_EXTERNAL_GW"
		;;
	Internal)
		net_segment_id="internal"
		net_segment_zone="internal"
		net_segment_conf_file=$U2UP_NETWORK_INTERNAL_CONF_FILE
		net_segment_conf_ifname="u2up_NET_INTERNAL_IFNAME"
		net_segment_conf_mac_addr="u2up_NET_INTERNAL_MAC_ADDR"
		net_segment_conf_addr_mask="u2up_NET_INTERNAL_ADDR_MASK"
		net_segment_conf_gw="u2up_NET_INTERNAL_GW"
		;;
	Home)
		net_segment_id="home"
		net_segment_zone="home"
		net_segment_conf_file=$U2UP_NETWORK_HOME_CONF_FILE
		net_segment_conf_ifname="u2up_NET_HOME_IFNAME"
		net_segment_conf_mac_addr="u2up_NET_HOME_MAC_ADDR"
		net_segment_conf_addr_mask="u2up_NET_HOME_ADDR_MASK"
		net_segment_conf_gw="u2up_NET_HOME_GW"
		;;
	*)
		msg="Unknown U2UP network segment configuration request!"
		rv=1
		;;
	esac
	if [ $rv -eq 0 ] && [ ! -f "${conf_dir}/${net_segment_conf_file}" ]; then
		msg="Missing U2UP network segment configuration file!"
		rv=1
	fi
	if [ $rv -eq 0 ]; then
		source ${conf_dir}/${net_segment_conf_file}
		if \
			[ -z "${!net_segment_conf_ifname}" ] || \
			[ -z "${!net_segment_conf_addr_mask}" ]
		then
			msg="Incomplete U2UP network segment configuration!"
			rv=1
		else
			net_segment_addr=$(echo -n "${!net_segment_conf_addr_mask}" | sed 's|\/.*||g')
		fi
	fi
	if [ $rv -eq 0 ]; then
		net_uuid=$(uuidgen)
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Unable to generate new UUID for the U2UP network segment configuration!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		cat > /etc/NetworkManager/system-connections/${net_segment_id}.nmconnection << EOF
[connection]
id=${net_segment_id}
uuid=${net_uuid}
type=ethernet
interface-name=${!net_segment_conf_ifname}
permissions=
zone=${net_segment_zone}

[ethernet]
cloned-mac-address=${!net_segment_conf_mac_addr}
mac-address-blacklist=

[ipv4]
address1=${!net_segment_conf_addr_mask},${!net_segment_conf_gw}
dns=127.0.0.1;
dns-search=
method=manual

[ipv6]
addr-gen-mode=stable-privacy
dns-search=
method=auto
EOF
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to write \"NetworkManager\" U2UP network segment configuration!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		chmod 600 /etc/NetworkManager/system-connections/${net_segment_id}.nmconnection
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to set file permissions for \"NetworkManager\" U2UP network segment configuration!"
		fi
	fi
	if [ $rv -ne 0 ]; then
		echo "${msg}" >&2
	fi
	return $rv
}

#
# Configure U2UP defined "acme.sh".
# (called from only chrooted during installation / upgrade)
#
configure_u2up_acme_account_selection() {
	local rv=0
	local conf_dir=${1:-${U2UP_CONF_DIR}}

	if [ ! -f "${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}" ]; then
		return 1
	fi
	source ${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}
	su -l acme /usr/share/acme/acmesh-install.sh ${u2up_ACME_ACCOUNT_EMAIL} >&2
	rv=$?
	return $rv
}

#
# Configure U2UP defined SW packages repository.
# (called from "upgrade" installer and chrooted during installation / upgrade)
#
configure_u2up_install_repo_selection() {
	local rv=0
	local conf_dir=${1:-${U2UP_CONF_DIR}}

	if [ ! -f "${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}" ]; then
		return 1
	fi
	source ${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}
#	if [ $TARGET_DONE -eq 0 ]; then
		if [ -n "${u2up_INSTALL_REPO_BASE_URL}" ]; then
			mkdir -p /etc/yum.repos.d
			(( rv+=$? ))
			echo "[base-repo]" > /etc/yum.repos.d/base.repo
			(( rv+=$? ))
			echo "name=Base installation repository" >> /etc/yum.repos.d/base.repo
			(( rv+=$? ))
			echo "baseurl=${u2up_INSTALL_REPO_BASE_URL}" >> /etc/yum.repos.d/base.repo
			(( rv+=$? ))
			echo "enabled=1" >> /etc/yum.repos.d/base.repo
			(( rv+=$? ))
			echo "metadata_expire=0" >> /etc/yum.repos.d/base.repo
			(( rv+=$? ))
			echo "gpgcheck=0" >> /etc/yum.repos.d/base.repo
			(( rv+=$? ))
#			set_target_done_for ${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE} ${new_target_done}
#			rv=$?
		else
			rm -rf /etc/yum.repos.d
			rv=$?
		fi
#	fi
	return $rv
}

############################################################
#                                                          #
# MISC functions of the U2UP configuration / installation! #
#                                                          #
############################################################
#
# Configure U2UP enforced mac naming policy for eth devices.
# (called only chrooted during installation / upgrade)
#
configure_u2up_mac_naming_eth_policy() {
	local rv=0
	local naming_policy_file="/lib/systemd/network/99-default.link"

	if [ ! -f "${naming_policy_file}" ]; then
		msg="Missing default network naming policy configuration file!"
		rv=1
	fi
	if [ $rv -eq 0 ]; then
		sed -i 's/NamePolicy=.*/NamePolicy=kernel mac database onboard slot path/' ${naming_policy_file}
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to change default naming policy file!"
		fi
	fi
	if [ $rv -ne 0 ]; then
		echo "${msg}" >&2
	fi
	return $rv
}

#
# Configure U2UP required services.
# (called only chrooted during installation / upgrade)
#
configure_u2up_required_services() {
	local msg=""
	local conf_dir=${U2UP_CONF_DIR}
	local net_internal_addr=""
	local net_home_addr=""
	local rv=0

	if [ -f "${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}
	fi
	if [ -f "${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}
	fi
	if [ -f "${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}
	fi
	if [ -f "${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}
	fi
	if [ -f "${conf_dir}/${U2UP_NETWORK_HOME_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_NETWORK_HOME_CONF_FILE}
	fi
	if [ -f "${conf_dir}/${U2UP_DOMAIN_CONF_FILE}" ]; then
		source ${conf_dir}/${U2UP_DOMAIN_CONF_FILE}
	fi
	net_internal_addr=$(echo -n "${u2up_NET_INTERNAL_ADDR_MASK}" | sed 's|\/.*||g')
	net_home_addr=$(echo -n "${u2up_NET_HOME_ADDR_MASK}" | sed 's|\/.*||g')
	if [ $rv -eq 0 ]; then
		echo "Preparing default \"firewalld\" service zones configuration..." >&2
		mkdir -p /etc/firewalld/zones
		rv=$?
		if [ $rv -eq 0 ]; then
			cat > /etc/firewalld/zones/external.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<zone>
  <short>External</short>
  <description>For use on external networks. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.</description>
  <service name="http"/>
  <service name="https"/>
  <service name="smtp"/>
  <masquerade/>
</zone>
EOF
			rv=$?
			cat > /etc/firewalld/zones/internal.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<zone>
  <short>Internal</short>
  <description>For use on internal networks. You mostly trust the other computers on the networks to not harm your computer. Only selected incoming connections are accepted.</description>
  <service name="ssh"/>
  <service name="mdns"/>
  <service name="samba-client"/>
  <service name="dhcpv6-client"/>
  <service name="http"/>
  <service name="dhcp"/>
  <service name="dns"/>
  <service name="https"/>
  <service name="smtp"/>
  <service name="imap"/>
</zone>
EOF
			(( rv+=$? ))
			cat > /etc/firewalld/zones/home.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<zone target="ACCEPT">
  <short>Home</short>
  <description>For use in home areas. You mostly trust the other computers on the networks to not harm your computer. Only selected incoming connections are accepted.</description>
  <service name="ssh"/>
  <service name="mdns"/>
  <service name="samba-client"/>
  <service name="dhcpv6-client"/>
  <service name="http"/>
  <service name="dhcp"/>
  <service name="dns"/>
  <service name="https"/>
  <service name="smtp"/>
  <service name="imap"/>
</zone>
EOF
			(( rv+=$? ))
		fi
		if [ $rv -ne 0 ]; then
			msg="Failed to prepare default \"firewalld\" service zones configuration!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Enabling \"firewalld\" service..." >&2
		systemctl enable firewalld.service
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to enable \"firewalld\" service!"
		else
			echo "Successfully enabled \"firewalld\" service!" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Enabling \"IPv4 forwarding\"..." >&2
		if [ -f "/etc/sysctl.conf" ]; then
			sed -i 's|.*net.ipv4.ip_forward=.*|net.ipv4.ip_forward=1|' /etc/sysctl.conf
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to enable \"IPv4 forwarding\"!"
			fi
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Disabling \"systemd-networked\" of the installed system (in-favour of NetworkManager)..." >&2
		if [ -f "/etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service" ]; then
			rm -f /etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to remove systemd-networkd-wait-online.service!"
			fi
		fi
		if [ $rv -eq 0 ] && [ -f "/etc/systemd/system/dbus-org.freedesktop.network1.service" ]; then
			rm -f /etc/systemd/system/dbus-org.freedesktop.network1.service
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to remove dbus-org.freedesktop.network1.service!"
			fi
		fi
		if [ $rv -eq 0 ] && [ -f "/etc/systemd/system/multi-user.target.wants/systemd-networkd.service" ]; then
			rm -f /etc/systemd/system/multi-user.target.wants/systemd-networkd.service
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to remove systemd-networkd.service!"
			fi
		fi
		if [ $rv -eq 0 ] && [ -f "/etc/systemd/system/sockets.target.wants/systemd-networkd.socket" ]; then
			rm -f /etc/systemd/system/sockets.target.wants/systemd-networkd.socket
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to remove systemd-networkd.socket!"
			fi
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Disabling \"systemd-resolved\" of the installed system (in-favour of dnsmasq)..." >&2
		if [ -f "/etc/systemd/system/multi-user.target.wants/systemd-resolved.service" ]; then
			rm -f /etc/systemd/system/multi-user.target.wants/systemd-resolved.service
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to remove systemd-resolved.service!"
			fi
		fi
		if [ $rv -eq 0 ] && [ -f "/etc/systemd/system/dbus-org.freedesktop.resolve1.service" ]; then
			rm -f /etc/systemd/system/dbus-org.freedesktop.resolve1.service
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to remove dbus-org.freedesktop.resolve1.service!"
			fi
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing \"dnamasq\" configuration of the installed system..." >&2
		if [ -f "/etc/resolv.conf_orig" ]; then
			rm -f /etc/resolv.conf
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to remove old resolv.conf!"
			fi
		else
			mv /etc/resolv.conf /etc/resolv.conf_orig
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to move original resolv.conf!"
			fi
		fi
		if [ $rv -eq 0 ]; then
			if [ -f "/etc/dnsmasq.conf_orig" ]; then
				rm -f /etc/dnsmasq.conf
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to remove old dnsmasq.conf!"
				fi
			else
				mv /etc/dnsmasq.conf /etc/dnsmasq.conf_orig
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to move original dnsmasq.conf!"
				fi
			fi
		fi
		if [ $rv -eq 0 ]; then
			cat > /etc/dnsmasq.conf << EOF
#/etc/dnsmasq.conf

# Listen on the given IP address(es).
listen-address=127.0.0.1
EOF
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to write common dnsmasq.conf (listen-address=127.0.0.1)!"
			fi
			if [ $rv -eq 0 ] && [ -n "${net_internal_addr}" ]; then
				cat >> /etc/dnsmasq.conf << EOF
listen-address=${net_internal_addr}
EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (listen-address=${net_internal_addr})!"
				fi
			fi
			if [ $rv -eq 0 ] && [ -n "${net_home_addr}" ]; then
				cat >> /etc/dnsmasq.conf << EOF
listen-address=${net_home_addr}

EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (listen-address=${net_home_addr})!"
				fi
			fi
			if [ $rv -eq 0 ]; then
				cat >> /etc/dnsmasq.conf << EOF
# On systems which support it, dnsmasq binds the wildcard address,
# even when it is listening on only some interfaces.
bind-interfaces

# Add the domain to simple names.
expand-hosts

# Bogus private reverse lookups.
bogus-priv

# Don't read /etc/resolv.conf.
no-resolv

# Tells dnsmasq to never forward A or AAAA queries for plain names.
domain-needed

EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (bind-interfaces...)!"
				fi
			fi
			if [ $rv -eq 0 ] && [ -n "${u2up_LOCAL_DOMAIN}" ]; then
				cat >> /etc/dnsmasq.conf << EOF
# Synonym for "server": without IP prevents forwarding.
local=/${u2up_LOCAL_DOMAIN}/

EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (local=/${u2up_LOCAL_DOMAIN}/)!"
				fi
			fi
			if [ $rv -eq 0 ] && [ -n "${u2up_FORWARD_DNS1}" ]; then
				cat >> /etc/dnsmasq.conf << EOF
# Specify IP address of upstream servers directly. Setting this flag does
# not suppress reading of /etc/resolv.conf, use --no-resolv to do that.
server=${u2up_FORWARD_DNS1}
EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (local=/${u2up_FORWARD_DNS1}/)!"
				fi
			fi
			if [ $rv -eq 0 ] && [ -n "${u2up_FORWARD_DNS2}" ]; then
				cat >> /etc/dnsmasq.conf << EOF
server=${u2up_FORWARD_DNS2}

EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (local=/${u2up_FORWARD_DNS2}/)!"
				fi
			fi
			if [ $rv -eq 0 ]; then
				cat >> /etc/dnsmasq.conf << EOF
# Additional hosts file. Read the specified file as well as /etc/hosts.
addn-hosts=/srv/etc/dnsmasq/addn-hosts

# Specify a different configuration file. The --conf-file option is also
# allowed in configuration files, to include multiple configuration files.
# DHCP ranges actually enable DHCP server in dnsmasq.
conf-file=/srv/etc/dnsmasq/dhcp-ranges

# Should be set when dnsmasq is definitely the only DHCP server on a network.
dhcp-authoritative

EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (addn-hosts=...)!"
				fi
			fi
			if [ $rv -eq 0 ] && [ -n "${u2up_LOCAL_DOMAIN}" ]; then
				cat >> /etc/dnsmasq.conf << EOF
# Specifies DNS domains for the DHCP server.
domain=${u2up_LOCAL_DOMAIN}

EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (domain=${u2up_LOCAL_DOMAIN})!"
				fi
			fi
			if [ $rv -eq 0 ]; then
				cat >> /etc/dnsmasq.conf << EOF
# Read DHCP host information from the specified file.
dhcp-hostsfile=/srv/etc/dnsmasq/dhcp-hosts

# Read DHCP option information from the specified file.
dhcp-optsfile=/srv/etc/dnsmasq/dhcp-opts

EOF
				rv=$?
				if [ $rv -ne 0 ]; then
					msg="Failed to write common dnsmasq.conf (dhcp-hostsfile=...)!"
				fi
			fi
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing specific \"dnsmasq\" service configuration..." >&2
		mkdir -p /srv/etc/dnsmasq
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to make directory /srv/etc/dnsmasq!"
		fi
		if [ $rv -eq 0 ]; then
			if [ -f "${U2UP_TMP_SRV_DIR}/etc/dnsmasq/addn-hosts" ]; then
				cp -p ${U2UP_TMP_SRV_DIR}/etc/dnsmasq/addn-hosts /srv/etc/dnsmasq/
				(( rv+=$? ))
			else
				touch /srv/etc/dnsmasq/addn-hosts
				(( rv+=$? ))
			fi
			if [ -f "${U2UP_TMP_SRV_DIR}/etc/dnsmasq/dhcp-hosts" ]; then
				cp -p ${U2UP_TMP_SRV_DIR}/etc/dnsmasq/dhcp-hosts /srv/etc/dnsmasq/
				(( rv+=$? ))
			else
				touch /srv/etc/dnsmasq/dhcp-hosts
				(( rv+=$? ))
			fi
			if [ -f "${U2UP_TMP_SRV_DIR}/etc/dnsmasq/dhcp-opts" ]; then
				cp -p ${U2UP_TMP_SRV_DIR}/etc/dnsmasq/dhcp-opts /srv/etc/dnsmasq/
				(( rv+=$? ))
			else
				touch /srv/etc/dnsmasq/dhcp-opts
				(( rv+=$? ))
			fi
			if [ -f "${U2UP_TMP_SRV_DIR}/etc/dnsmasq/dhcp-ranges" ]; then
				cp -p ${U2UP_TMP_SRV_DIR}/etc/dnsmasq/dhcp-ranges /srv/etc/dnsmasq/
				(( rv+=$? ))
			fi
			if [ $rv -ne 0 ]; then
				msg="Failed to prepare specific \"dnsmasq\" service configuration!"
			fi
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing \"apache2\" webserver data path..." >&2
		mkdir -p /srv/www
		rv=$?
		cp -a ${U2UP_TMP_SRV_DIR}/www/* /srv/www/
		(( rv+=$? ))
		chown -R daemon.daemon /srv/www
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to prepare \"apache2\" webserver data path!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing configuration for \"apache2\" webserver..." >&2
		mv /etc/apache2/httpd.conf /etc/apache2/httpd.conf_orig
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to move original httpd.conf!"
		fi
		cat > /etc/apache2/httpd.conf << EOF
#
# This is the main Apache HTTP server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.
# In particular, see 
# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>
# for a discussion of each configuration directive.
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.  
#
# Configuration and logfile names: If the filenames you specify for many
# of the server's control files begin with "/" (or "drive:/" for Win32), the
# server will use that explicit path.  If the filenames do *not* begin
# with "/", the value of ServerRoot is prepended -- so "logs/access_log"
# with ServerRoot set to "/usr/local/apache2" will be interpreted by the
# server as "/usr/local/apache2/logs/access_log", whereas "/logs/access_log" 
# will be interpreted as '/logs/access_log'.

#
# ServerRoot: The top of the directory tree under which the server's
# configuration, error, and log files are kept.
#
# Do not add a slash at the end of the directory path.  If you point
# ServerRoot at a non-local disk, be sure to specify a local disk on the
# Mutex directive, if file-based mutexes are used.  If you wish to share the
# same ServerRoot for multiple httpd daemons, you will need to change at
# least PidFile.
#
ServerRoot "/"

#
# Mutex: Allows you to set the mutex mechanism and mutex file directory
# for individual mutexes, or change the global defaults
#
# Uncomment and change the directory if mutexes are file-based and the default
# mutex file directory is not on a local disk or is not appropriate for some
# other reason.
#
# Mutex default:var/run/apache2

#
# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, instead of the default. See also the <VirtualHost>
# directive.
#
# Change this to Listen on specific IP addresses as shown below to 
# prevent Apache from glomming onto all bound IP addresses.
#
#Listen 12.34.56.78:80
Listen 80

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you
# have to place corresponding \`LoadModule' lines at this location so the
# directives contained in it are actually available _before_ they are used.
# Statically compiled modules (those listed by \`httpd -l') do not need
# to be loaded here.
#
# Example:
# LoadModule foo_module modules/mod_foo.so
#
LoadModule mpm_worker_module usr/lib/apache2/modules/mod_mpm_worker.so
LoadModule authn_file_module usr/lib/apache2/modules/mod_authn_file.so
#LoadModule authn_dbm_module usr/lib/apache2/modules/mod_authn_dbm.so
#LoadModule authn_anon_module usr/lib/apache2/modules/mod_authn_anon.so
#LoadModule authn_dbd_module usr/lib/apache2/modules/mod_authn_dbd.so
#LoadModule authn_socache_module usr/lib/apache2/modules/mod_authn_socache.so
LoadModule authn_core_module usr/lib/apache2/modules/mod_authn_core.so
LoadModule authz_host_module usr/lib/apache2/modules/mod_authz_host.so
LoadModule authz_groupfile_module usr/lib/apache2/modules/mod_authz_groupfile.so
LoadModule authz_user_module usr/lib/apache2/modules/mod_authz_user.so
#LoadModule authz_dbm_module usr/lib/apache2/modules/mod_authz_dbm.so
#LoadModule authz_owner_module usr/lib/apache2/modules/mod_authz_owner.so
#LoadModule authz_dbd_module usr/lib/apache2/modules/mod_authz_dbd.so
LoadModule authz_core_module usr/lib/apache2/modules/mod_authz_core.so
LoadModule access_compat_module usr/lib/apache2/modules/mod_access_compat.so
LoadModule auth_basic_module usr/lib/apache2/modules/mod_auth_basic.so
#LoadModule auth_form_module usr/lib/apache2/modules/mod_auth_form.so
#LoadModule auth_digest_module usr/lib/apache2/modules/mod_auth_digest.so
#LoadModule allowmethods_module usr/lib/apache2/modules/mod_allowmethods.so
#LoadModule file_cache_module usr/lib/apache2/modules/mod_file_cache.so
#LoadModule cache_module usr/lib/apache2/modules/mod_cache.so
#LoadModule cache_disk_module usr/lib/apache2/modules/mod_cache_disk.so
#LoadModule cache_socache_module usr/lib/apache2/modules/mod_cache_socache.so
LoadModule socache_shmcb_module usr/lib/apache2/modules/mod_socache_shmcb.so
#LoadModule socache_dbm_module usr/lib/apache2/modules/mod_socache_dbm.so
#LoadModule socache_memcache_module usr/lib/apache2/modules/mod_socache_memcache.so
#LoadModule watchdog_module usr/lib/apache2/modules/mod_watchdog.so
#LoadModule macro_module usr/lib/apache2/modules/mod_macro.so
#LoadModule dbd_module usr/lib/apache2/modules/mod_dbd.so
#LoadModule dumpio_module usr/lib/apache2/modules/mod_dumpio.so
#LoadModule buffer_module usr/lib/apache2/modules/mod_buffer.so
#LoadModule ratelimit_module usr/lib/apache2/modules/mod_ratelimit.so
LoadModule reqtimeout_module usr/lib/apache2/modules/mod_reqtimeout.so
#LoadModule ext_filter_module usr/lib/apache2/modules/mod_ext_filter.so
#LoadModule request_module usr/lib/apache2/modules/mod_request.so
#LoadModule include_module usr/lib/apache2/modules/mod_include.so
LoadModule filter_module usr/lib/apache2/modules/mod_filter.so
#LoadModule substitute_module usr/lib/apache2/modules/mod_substitute.so
#LoadModule sed_module usr/lib/apache2/modules/mod_sed.so
#LoadModule deflate_module usr/lib/apache2/modules/mod_deflate.so
LoadModule mime_module usr/lib/apache2/modules/mod_mime.so
LoadModule log_config_module usr/lib/apache2/modules/mod_log_config.so
#LoadModule log_debug_module usr/lib/apache2/modules/mod_log_debug.so
#LoadModule logio_module usr/lib/apache2/modules/mod_logio.so
LoadModule env_module usr/lib/apache2/modules/mod_env.so
#LoadModule expires_module usr/lib/apache2/modules/mod_expires.so
LoadModule headers_module usr/lib/apache2/modules/mod_headers.so
#LoadModule unique_id_module usr/lib/apache2/modules/mod_unique_id.so
LoadModule setenvif_module usr/lib/apache2/modules/mod_setenvif.so
LoadModule version_module usr/lib/apache2/modules/mod_version.so
#LoadModule remoteip_module usr/lib/apache2/modules/mod_remoteip.so
#LoadModule proxy_module usr/lib/apache2/modules/mod_proxy.so
#LoadModule proxy_connect_module usr/lib/apache2/modules/mod_proxy_connect.so
#LoadModule proxy_ftp_module usr/lib/apache2/modules/mod_proxy_ftp.so
#LoadModule proxy_http_module usr/lib/apache2/modules/mod_proxy_http.so
#LoadModule proxy_fcgi_module usr/lib/apache2/modules/mod_proxy_fcgi.so
#LoadModule proxy_scgi_module usr/lib/apache2/modules/mod_proxy_scgi.so
#LoadModule proxy_uwsgi_module usr/lib/apache2/modules/mod_proxy_uwsgi.so
#LoadModule proxy_fdpass_module usr/lib/apache2/modules/mod_proxy_fdpass.so
#LoadModule proxy_wstunnel_module usr/lib/apache2/modules/mod_proxy_wstunnel.so
#LoadModule proxy_ajp_module usr/lib/apache2/modules/mod_proxy_ajp.so
#LoadModule proxy_balancer_module usr/lib/apache2/modules/mod_proxy_balancer.so
#LoadModule proxy_express_module usr/lib/apache2/modules/mod_proxy_express.so
#LoadModule proxy_hcheck_module usr/lib/apache2/modules/mod_proxy_hcheck.so
#LoadModule session_module usr/lib/apache2/modules/mod_session.so
#LoadModule session_cookie_module usr/lib/apache2/modules/mod_session_cookie.so
#LoadModule session_crypto_module usr/lib/apache2/modules/mod_session_crypto.so
#LoadModule session_dbd_module usr/lib/apache2/modules/mod_session_dbd.so
#LoadModule slotmem_shm_module usr/lib/apache2/modules/mod_slotmem_shm.so
LoadModule ssl_module usr/lib/apache2/modules/mod_ssl.so
#LoadModule lbmethod_byrequests_module usr/lib/apache2/modules/mod_lbmethod_byrequests.so
#LoadModule lbmethod_bytraffic_module usr/lib/apache2/modules/mod_lbmethod_bytraffic.so
#LoadModule lbmethod_bybusyness_module usr/lib/apache2/modules/mod_lbmethod_bybusyness.so
#LoadModule lbmethod_heartbeat_module usr/lib/apache2/modules/mod_lbmethod_heartbeat.so
LoadModule unixd_module usr/lib/apache2/modules/mod_unixd.so
#LoadModule dav_module usr/lib/apache2/modules/mod_dav.so
LoadModule status_module usr/lib/apache2/modules/mod_status.so
LoadModule autoindex_module usr/lib/apache2/modules/mod_autoindex.so
#LoadModule info_module usr/lib/apache2/modules/mod_info.so
#LoadModule cgid_module usr/lib/apache2/modules/mod_cgid.so
#LoadModule dav_fs_module usr/lib/apache2/modules/mod_dav_fs.so
#LoadModule vhost_alias_module usr/lib/apache2/modules/mod_vhost_alias.so
#LoadModule negotiation_module usr/lib/apache2/modules/mod_negotiation.so
LoadModule dir_module usr/lib/apache2/modules/mod_dir.so
#LoadModule actions_module usr/lib/apache2/modules/mod_actions.so
#LoadModule speling_module usr/lib/apache2/modules/mod_speling.so
#LoadModule userdir_module usr/lib/apache2/modules/mod_userdir.so
LoadModule alias_module usr/lib/apache2/modules/mod_alias.so
#LoadModule rewrite_module usr/lib/apache2/modules/mod_rewrite.so

<IfModule unixd_module>
#
# If you wish httpd to run as a different user or group, you must run
# httpd as root initially and it will switch.  
#
# User/Group: The name (or #number) of the user/group to run httpd as.
# It is usually good practice to create a dedicated user and group for
# running httpd, as with most system services.
#
User daemon
Group daemon

</IfModule>

# 'Main' server configuration
#
# The directives in this section set up the values used by the 'main'
# server, which responds to any requests that aren't handled by a
# <VirtualHost> definition.  These values also provide defaults for
# any <VirtualHost> containers you may define later in the file.
#
# All of these directives may appear inside <VirtualHost> containers,
# in which case these default settings will be overridden for the
# virtual host being defined.
#

#
# ServerAdmin: Your address, where problems with the server should be
# e-mailed.  This address appears on some server-generated pages, such
# as error documents.  e.g. admin@your-domain.com
#
#ServerAdmin you@example.com

#
# ServerName gives the name and port that the server uses to identify itself.
# This can often be determined automatically, but we recommend you specify
# it explicitly to prevent problems during startup.
#
# If your host doesn't have a registered DNS name, enter its IP address here.
#
#ServerName localhost:80

#
# Deny access to the entirety of your server's filesystem. You must
# explicitly permit access to web content directories in other 
# <Directory> blocks below.
#
<Directory />
    AllowOverride none
    Require all denied
</Directory>

#
# Note that from this point forward you must specifically allow
# particular features to be enabled - so if something's not working as
# you might expect, make sure that you have specifically enabled it
# below.
#

#
# DocumentRoot: The directory out of which you will serve your
# documents. By default, all requests are taken from this directory, but
# symbolic links and aliases may be used to point to other locations.
#
#DocumentRoot "//usr/share/apache2/default-site/htdocs"
#<Directory "//usr/share/apache2/default-site/htdocs">
    #
    # Possible values for the Options directive are "None", "All",
    # or any combination of:
    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
    #
    # Note that "MultiViews" must be named *explicitly* --- "Options All"
    # doesn't give it to you.
    #
    # The Options directive is both complicated and important.  Please see
    # http://httpd.apache.org/docs/2.4/mod/core.html#options
    # for more information.
    #
#    Options Indexes FollowSymLinks

    #
    # AllowOverride controls what directives may be placed in .htaccess files.
    # It can be "All", "None", or any combination of the keywords:
    #   AllowOverride FileInfo AuthConfig Limit
    #
#    AllowOverride None

    #
    # Controls who can get stuff from this server.
    #
#    Require all granted
#</Directory>

#
# DirectoryIndex: sets the file that Apache will serve if a directory
# is requested.
#
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>

#
# The following lines prevent .htaccess and .htpasswd files from being 
# viewed by Web clients. 
#
<Files ".ht*">
    Require all denied
</Files>

#
# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
ErrorLog "var/log/apache2/error_log"

#
# LogLevel: Control the number of messages logged to the error_log.
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
#
LogLevel warn

<IfModule log_config_module>
    #
    # The following directives define some format nicknames for use with
    # a CustomLog directive (see below).
    #
    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
    LogFormat "%h %l %u %t \"%r\" %>s %b" common

    <IfModule logio_module>
      # You need to enable mod_logio.c to use %I and %O
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
    </IfModule>

    #
    # The location and format of the access logfile (Common Logfile Format).
    # If you do not define any access logfiles within a <VirtualHost>
    # container, they will be logged here.  Contrariwise, if you *do*
    # define per-<VirtualHost> access logfiles, transactions will be
    # logged therein and *not* in this file.
    #
    CustomLog "var/log/apache2/access_log" common

    #
    # If you prefer a logfile with access, agent, and referer information
    # (Combined Logfile Format) you can use the following directive.
    #
    #CustomLog "var/log/apache2/access_log" combined
</IfModule>

<IfModule alias_module>
    #
    # Redirect: Allows you to tell clients about documents that used to 
    # exist in your server's namespace, but do not anymore. The client 
    # will make a new request for the document at its new location.
    # Example:
    # Redirect permanent /foo http://www.example.com/bar

    #
    # Alias: Maps web paths into filesystem paths and is used to
    # access content that does not live under the DocumentRoot.
    # Example:
    # Alias /webpath /full/filesystem/path
    #
    # If you include a trailing / on /webpath then the server will
    # require it to be present in the URL.  You will also likely
    # need to provide a <Directory> section to allow access to
    # the filesystem path.

    #
    # ScriptAlias: This controls which directories contain server scripts. 
    # ScriptAliases are essentially the same as Aliases, except that
    # documents in the target directory are treated as applications and
    # run by the server when requested rather than as documents sent to the
    # client.  The same rules about trailing "/" apply to ScriptAlias
    # directives as to Alias.
    #
    ScriptAlias /cgi-bin/ "/usr/lib/cgi-bin/"

</IfModule>

<IfModule cgid_module>
    #
    # ScriptSock: On threaded servers, designate the path to the UNIX
    # socket used to communicate with the CGI daemon of mod_cgid.
    #
    #Scriptsock cgisock
</IfModule>

#
# "/usr/lib/cgi-bin" should be changed to whatever your ScriptAliased
# CGI directory exists, if you have that configured.
#
<Directory "/usr/lib/cgi-bin">
    AllowOverride None
    Options None
    Require all granted
</Directory>

<IfModule headers_module>
    #
    # Avoid passing HTTP_PROXY environment to CGI's on this or any proxied
    # backend servers which have lingering "httpoxy" defects.
    # 'Proxy' request header is undefined by the IETF, not listed by IANA
    #
    RequestHeader unset Proxy early
</IfModule>

<IfModule mime_module>
    #
    # TypesConfig points to the file containing the list of mappings from
    # filename extension to MIME-type.
    #
    TypesConfig etc/apache2/mime.types

    #
    # AddType allows you to add to or override the MIME configuration
    # file specified in TypesConfig for specific file types.
    #
    #AddType application/x-gzip .tgz
    #
    # AddEncoding allows you to have certain browsers uncompress
    # information on the fly. Note: Not all browsers support this.
    #
    #AddEncoding x-compress .Z
    #AddEncoding x-gzip .gz .tgz
    #
    # If the AddEncoding directives above are commented-out, then you
    # probably should define those extensions to indicate media types:
    #
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz

    #
    # AddHandler allows you to map certain file extensions to "handlers":
    # actions unrelated to filetype. These can be either built into the server
    # or added with the Action directive (see below)
    #
    # To use CGI scripts outside of ScriptAliased directories:
    # (You will also need to add "ExecCGI" to the "Options" directive.)
    #
    #AddHandler cgi-script .cgi

    # For type maps (negotiated resources):
    #AddHandler type-map var

    #
    # Filters allow you to process content before it is sent to the client.
    #
    # To parse .shtml files for server-side includes (SSI):
    # (You will also need to add "Includes" to the "Options" directive.)
    #
    #AddType text/html .shtml
    #AddOutputFilter INCLUDES .shtml
</IfModule>

#
# The mod_mime_magic module allows the server to use various hints from the
# contents of the file itself to determine its type.  The MIMEMagicFile
# directive tells the module where the hint definitions are located.
#
#MIMEMagicFile etc/apache2/magic

#
# Customizable error responses come in three flavors:
# 1) plain text 2) local redirects 3) external redirects
#
# Some examples:
#ErrorDocument 500 "The server made a boo boo."
#ErrorDocument 404 /missing.html
#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
#ErrorDocument 402 http://www.example.com/subscription_info.html
#

#
# MaxRanges: Maximum number of Ranges in a request before
# returning the entire resource, or one of the special
# values 'default', 'none' or 'unlimited'.
# Default setting is to accept 200 Ranges.
#MaxRanges unlimited

#
# EnableMMAP and EnableSendfile: On systems that support it, 
# memory-mapping or the sendfile syscall may be used to deliver
# files.  This usually improves server performance, but must
# be turned off when serving from networked-mounted 
# filesystems or if support for these functions is otherwise
# broken on your system.
# Defaults: EnableMMAP On, EnableSendfile Off
#
#EnableMMAP off
#EnableSendfile on

# Supplemental configuration
#
# The configuration files in the etc/apache2/extra/ directory can be 
# included to add extra features or to modify the default configuration of 
# the server, or you may simply copy their contents here and change as 
# necessary.

# Server-pool management (MPM specific)
#Include etc/apache2/extra/httpd-mpm.conf

# Multi-language error messages
#Include etc/apache2/extra/httpd-multilang-errordoc.conf

# Fancy directory listings
#Include etc/apache2/extra/httpd-autoindex.conf

# Language settings
#Include etc/apache2/extra/httpd-languages.conf

# User home directories
#Include etc/apache2/extra/httpd-userdir.conf

# Real-time info on requests and configuration
#Include etc/apache2/extra/httpd-info.conf

# Virtual hosts
#Include etc/apache2/extra/httpd-vhosts.conf

# Local access to the Apache HTTP Server Manual
#Include etc/apache2/extra/httpd-manual.conf

# Distributed authoring and versioning (WebDAV)
#Include etc/apache2/extra/httpd-dav.conf

# Various default settings
#Include etc/apache2/extra/httpd-default.conf

# Configure mod_proxy_html to understand HTML4/XHTML1
<IfModule proxy_html_module>
Include etc/apache2/extra/proxy-html.conf
</IfModule>

# Secure (SSL/TLS) connections
#Include etc/apache2/extra/httpd-ssl.conf
#
# Note: The following must must be present to support
#       starting without SSL on platforms with no /dev/random equivalent
#       but a statically compiled-in mod_ssl.
#
<IfModule ssl_module>
SSLRandomSeed startup builtin
SSLRandomSeed connect builtin
</IfModule>


IncludeOptional /etc/apache2/conf.d/*.conf
IncludeOptional /etc/apache2/modules.d/*.load
IncludeOptional /etc/apache2/modules.d/*.conf


PidFile /run/httpd.pid

# Security Hardening Begin:
TraceEnable off
ServerSignature Off
ServerTokens Prod
<Directory />
Options None
Order allow,deny
Allow from all
</Directory>
# Security Hardening End!

EOF
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to write apache2/httpd.conf!"
		fi
		if [ $rv -eq 0 ]; then
			mkdir -p /etc/apache2/conf.d
		fi
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to prepare directory /etc/apache2/conf.d!"
		fi
		cat > /etc/apache2/conf.d/ssl.conf << EOF
<VirtualHost *:80>

        ServerName www.${u2up_LOCAL_DOMAIN}
        ServerAdmin ${u2up_TARGET_ADMIN_NAME}@${u2up_LOCAL_DOMAIN}

        # Redirect Requests to SSL
        Redirect permanent "/" "https://www.${u2up_LOCAL_DOMAIN}/"

DocumentRoot "//srv/www/html"                                                                 
<Directory "//srv/www/html">                                                                  
    Options Indexes FollowSymLinks                                                            
    AllowOverride None                                                                        
    Require all granted                                                                       
</Directory>                                                                                  

#
#        ErrorLog \${APACHE_LOG_DIR}/error.log
#        CustomLog \${APACHE_LOG_DIR}/access.log combined
#
</VirtualHost>


<IfModule mod_ssl.c>

#
# This is the Apache server configuration file providing SSL support.
# It contains the configuration directives to instruct the server how to
# serve pages over an https connection. For detailed information about these 
# directives see <URL:http://httpd.apache.org/docs/2.4/mod/mod_ssl.html>
# 
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.  
#
# Required modules: mod_log_config, mod_setenvif, mod_ssl,
#          socache_shmcb_module (for default value of SSLSessionCache)

#
# Pseudo Random Number Generator (PRNG):
# Configure one or more sources to seed the PRNG of the SSL library.
# The seed data should be of good random quality.
# WARNING! On some platforms /dev/random blocks if not enough entropy
# is available. This means you then cannot use the /dev/random device
# because it would lead to very long connection times (as long as
# it requires to make more entropy available). But usually those
# platforms additionally provide a /dev/urandom device which doesn't
# block. So, if available, use this one instead. Read the mod_ssl User
# Manual for more details.
#
#SSLRandomSeed startup file:/dev/random  512
SSLRandomSeed startup file:/dev/urandom 512
#SSLRandomSeed connect file:/dev/random  512
SSLRandomSeed connect file:/dev/urandom 512


#
# When we also provide SSL we have to listen to the 
# standard HTTP port (see above) and to the HTTPS port
#
Listen 443

##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#   SSL Cipher Suite:
#   List the ciphers that the client is permitted to negotiate,
#   and that httpd will negotiate as the client of a proxied server.
#   See the OpenSSL documentation for a complete list of ciphers, and
#   ensure these follow appropriate best practices for this deployment.
#   httpd 2.2.30, 2.4.13 and later force-disable aNULL, eNULL and EXP ciphers,
#   while OpenSSL disabled these by default in 0.9.8zf/1.0.0r/1.0.1m/1.0.2a.
#SSLCipherSuite HIGH:MEDIUM:!MD5:!RC4:!3DES
#SSLProxyCipherSuite HIGH:MEDIUM:!MD5:!RC4:!3DES

#  By the end of 2016, only TLSv1.2 ciphers should remain in use.
#  Older ciphers should be disallowed as soon as possible, while the
#  kRSA ciphers do not offer forward secrecy.  These changes inhibit
#  older clients (such as IE6 SP2 or IE8 on Windows XP, or other legacy
#  non-browser tooling) from successfully connecting.  
#
#  To restrict mod_ssl to use only TLSv1.2 ciphers, and disable
#  those protocols which do not support forward secrecy, replace
#  the SSLCipherSuite and SSLProxyCipherSuite directives above with
#  the following two directives, as soon as practical.
SSLCipherSuite HIGH:MEDIUM:!SSLv3:!kRSA
SSLProxyCipherSuite HIGH:MEDIUM:!SSLv3:!kRSA
# From security hardening tips:
#SSLCipherSuite ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM  

#   User agents such as web browsers are not configured for the user's
#   own preference of either security or performance, therefore this
#   must be the prerogative of the web server administrator who manages
#   cpu load versus confidentiality, so enforce the server's cipher order.
SSLHonorCipherOrder on 

#   SSL Protocol support:
#   List the protocol versions which clients are allowed to connect with.
#   Disable SSLv3 by default (cf. RFC 7525 3.1.1).  TLSv1 (1.0) should be
#   disabled as quickly as practical.  By the end of 2016, only the TLSv1.2
#   protocol or later should remain in use.
SSLProtocol all -SSLv3
SSLProxyProtocol all -SSLv3
# From security hardening tips:
#SSLProtocol -ALL +TLSv1.2                                                

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (\`builtin' is an internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  builtin

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism 
#   to use and second the expiring timeout (in seconds).
#SSLSessionCache         "dbm://var/run/apache2/ssl_scache"
SSLSessionCache        "shmcb://var/run/apache2/ssl_scache(512000)"
SSLSessionCacheTimeout  300

#   OCSP Stapling (requires OpenSSL 0.9.8h or later)
#
#   This feature is disabled by default and requires at least
#   the two directives SSLUseStapling and SSLStaplingCache.
#   Refer to the documentation on OCSP Stapling in the SSL/TLS
#   How-To for more information.
#
#   Enable stapling for all SSL-enabled servers:
#SSLUseStapling On

#   Define a relatively small cache for OCSP Stapling using
#   the same mechanism that is used for the SSL session cache
#   above.  If stapling is used with more than a few certificates,
#   the size may need to be increased.  (AH01929 will be logged.)
#SSLStaplingCache "shmcb://var/run/apache2/ssl_stapling(32768)"

#   Seconds before valid OCSP responses are expired from the cache
#SSLStaplingStandardCacheTimeout 3600

#   Seconds before invalid OCSP responses are expired from the cache
#SSLStaplingErrorCacheTimeout 600

##
## SSL Virtual Host Context
##

<VirtualHost _default_:443>

#   General setup for the virtual host
DocumentRoot "//srv/www/html"
<Directory "//srv/www/html">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>

ServerName www.${u2up_LOCAL_DOMAIN}:443
ServerAdmin ${u2up_TARGET_ADMIN_NAME}@${u2up_LOCAL_DOMAIN}
ErrorLog "//var/log/apache2/error_log"
TransferLog "//var/log/apache2/access_log"

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
SSLEngine on

#   Server Certificate:
#   Point SSLCertificateFile at a PEM encoded certificate.  If
#   the certificate is encrypted, then you will be prompted for a
#   pass phrase.  Note that a kill -HUP will prompt again.  Keep
#   in mind that if you have both an RSA and a DSA certificate you
#   can configure both in parallel (to also allow the use of DSA
#   ciphers, etc.)
#   Some ECC cipher suites (http://www.ietf.org/rfc/rfc4492.txt)
#   require an ECC certificate which can also be configured in
#   parallel.
SSLCertificateFile "/srv/etc/apache2/server.crt"
#SSLCertificateFile "/etc/apache2/server-dsa.crt"
#SSLCertificateFile "/etc/apache2/server-ecc.crt"

#   Server Private Key:
#   If the key is not combined with the certificate, use this
#   directive to point at the key file.  Keep in mind that if
#   you've both a RSA and a DSA private key you can configure
#   both in parallel (to also allow the use of DSA ciphers, etc.)
#   ECC keys, when in use, can also be configured in parallel
SSLCertificateKeyFile "/srv/etc/apache2/server.key"
#SSLCertificateKeyFile "/etc/apache2/server-dsa.key"
#SSLCertificateKeyFile "/etc/apache2/server-ecc.key"

#   Server Certificate Chain:
#   Point SSLCertificateChainFile at a file containing the
#   concatenation of PEM encoded CA certificates which form the
#   certificate chain for the server certificate. Alternatively
#   the referenced file can be the same as SSLCertificateFile
#   when the CA certificates are directly appended to the server
#   certificate for convenience.
SSLCertificateChainFile "/srv/etc/apache2/server-ca.crt"

#   Certificate Authority (CA):
#   Set the CA certificate verification path where to find CA
#   certificates for client authentication or alternatively one
#   huge file containing all of them (file must be PEM encoded)
#   Note: Inside SSLCACertificatePath you need hash symlinks
#         to point to the certificate files. Use the provided
#         Makefile to update the hash symlinks after changes.
#SSLCACertificatePath "/etc/apache2/ssl.crt"
#SSLCACertificateFile "/etc/apache2/ssl.crt/ca-bundle.crt"

#   Certificate Revocation Lists (CRL):
#   Set the CA revocation path where to find CA CRLs for client
#   authentication or alternatively one huge file containing all
#   of them (file must be PEM encoded).
#   The CRL checking mode needs to be configured explicitly
#   through SSLCARevocationCheck (defaults to "none" otherwise).
#   Note: Inside SSLCARevocationPath you need hash symlinks
#         to point to the certificate files. Use the provided
#         Makefile to update the hash symlinks after changes.
#SSLCARevocationPath "/etc/apache2/ssl.crl"
#SSLCARevocationFile "/etc/apache2/ssl.crl/ca-bundle.crl"
#SSLCARevocationCheck chain

#   Client Authentication (Type):
#   Client certificate verification type and depth.  Types are
#   none, optional, require and optional_no_ca.  Depth is a
#   number which specifies how deeply to verify the certificate
#   issuer chain before deciding the certificate is not valid.
#SSLVerifyClient require
#SSLVerifyDepth  10

#   TLS-SRP mutual authentication:
#   Enable TLS-SRP and set the path to the OpenSSL SRP verifier
#   file (containing login information for SRP user accounts). 
#   Requires OpenSSL 1.0.1 or newer. See the mod_ssl FAQ for
#   detailed instructions on creating this file. Example:
#   "openssl srp -srpvfile /etc/apache2/passwd.srpv -add username"
#SSLSRPVerifierFile "/etc/apache2/passwd.srpv"

#   Access Control:
#   With SSLRequire you can do per-directory access control based
#   on arbitrary complex boolean expressions containing server
#   variable checks and other lookup directives.  The syntax is a
#   mixture between C and Perl.  See the mod_ssl documentation
#   for more details.
#<Location />
#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \\
#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \\
#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \\
#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \\
#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \\
#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
#</Location>

#   SSL Engine Options:
#   Set various options for the SSL engine.
#   o FakeBasicAuth:
#     Translate the client X.509 into a Basic Authorisation.  This means that
#     the standard Auth/DBMAuth methods can be used for access control.  The
#     user name is the \`one line' version of the client's X.509 certificate.
#     Note that no password is obtained from the user. Every entry in the user
#     file needs this password: \`xxj31ZMTZzkVA'.
#   o ExportCertData:
#     This exports two additional environment variables: SSL_CLIENT_CERT and
#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#     server (always existing) and the client (only existing when client
#     authentication is used). This can be used to import the certificates
#     into CGI scripts.
#   o StdEnvVars:
#     This exports the standard SSL/TLS related \`SSL_*' environment variables.
#     Per default this exportation is switched off for performance reasons,
#     because the extraction step is an expensive operation and is usually
#     useless for serving static content. So one usually enables the
#     exportation for CGI and SSI requests only.
#   o StrictRequire:
#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
#     under a "Satisfy any" situation, i.e. when it applies access is denied
#     and no other module can change it.
#   o OptRenegotiate:
#     This enables optimized SSL connection renegotiation handling when SSL
#     directives are used in per-directory context. 
#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
<FilesMatch "\.(cgi|shtml|phtml|php)$">
    SSLOptions +StdEnvVars
</FilesMatch>
<Directory "/usr/lib/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn't wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#     This forces an unclean shutdown when the connection is closed, i.e. no
#     SSL close notify alert is sent or allowed to be received.  This violates
#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
#     this when you receive I/O errors because of the standard approach where
#     mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#     This forces an accurate shutdown when the connection is closed, i.e. a
#     SSL close notify alert is send and mod_ssl waits for the close notify
#     alert of the client. This is 100% SSL/TLS standard compliant, but in
#     practice often causes hanging connections with brain-dead browsers. Use
#     this only for browsers where you know that their SSL implementation
#     works correctly. 
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
BrowserMatch "MSIE [2-5]" \\
         nokeepalive ssl-unclean-shutdown \\
         downgrade-1.0 force-response-1.0

#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
CustomLog "//var/log/apache2/ssl_request_log" \\
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>                                  

</IfModule>

EOF
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to write apache2/conf.d/ssl.conf!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Enabling \"apache2\" webserver..." >&2
		systemctl enable apache2
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to enable \"apache2\" webserver!"
		else
			echo "Successfully enabled \"apache2\" webserver!" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing \"postfix\" mail-server virtual mailbox owner (user \"vmail\")..." >&2
		groupmod -g 5000 vmail
		(( rv+=$? ))
		usermod -d /srv/vmail -g 5000 -u 5000 -s /bin/bash vmail
		(( rv+=$? ))
		chown -R vmail.vmail /var/spool/vmail
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to prepare \"postfix\" mail-server virtual mailbox owner!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing \"postfix\" mail-server virtual mailbox path..." >&2
		mkdir -p /srv/vmail
		rv=$?
		cp -a ${U2UP_TMP_SRV_DIR}/vmail/* /srv/vmail/
		(( rv+=$? ))
		chown -R vmail.vmail /srv/vmail
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to prepare \"postfix\" mail-server virtual mailbox path!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing specific \"postfix\" mail-server virtual configuration..." >&2
		mkdir -p /srv/etc/postfix
		rv=$?
		cp -a ${U2UP_TMP_SRV_DIR}/etc/postfix/* /srv/etc/postfix/
		(( rv+=$? ))
		touch /srv/etc/postfix/virtual
		(( rv+=$? ))
		touch /srv/etc/postfix/vhosts
		(( rv+=$? ))
		touch /srv/etc/postfix/vmaps
		(( rv+=$? ))
		postmap /srv/etc/postfix/vmaps
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to prepare specific \"postfix\" mail-server virtual configuration!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing common configuration for \"postfix\" mail-server..." >&2
		cp -p /etc/postfix/main.cf /etc/postfix/main.cf_orig
		(( rv+=$? ))
		cat > /etc/postfix/main.cf << EOF
compatibility_level=2
smtputf8_enable = no

biff = no

# appending .domain is the MUA's job.
append_dot_mydomain = no

# Uncomment the next line to generate "delayed mail" warnings
#delay_warning_time = 4h

#myhostname = localhost
myhostname = mail.${u2up_LOCAL_DOMAIN}
mydestination = \$myhostname, localhost.\$mydomain
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
myorigin = \$myhostname
#mynetworks = 127.0.0.1/8
mynetworks = 127.0.0.0/8
#inet_interfaces = 127.0.0.1
inet_interfaces = all

mailbox_size_limit = 0
virtual_alias_domains = localhost
virtual_alias_maps = hash:/srv/etc/postfix/virtual
virtual_mailbox_domains = /srv/etc/postfix/vhosts
virtual_mailbox_maps = hash:/srv/etc/postfix/vmaps
virtual_mailbox_base = /srv/vmail
virtual_minimum_uid = 1000
virtual_uid_maps = static:5000
virtual_gid_maps = static:5000
virtual_transport = lmtp:unix:private/dovecot-lmtp
recipient_delimiter = +

smtpd_sasl_auth_enable = yes
smtpd_sasl_security_options = noplaintext,noanonymous
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth

#
# Anti-spam configuration hardening!
# 7 tips according to:
# https://www.linuxbabe.com/mail-server/block-email-spam-postfix
#

#
#1: Reject Email if SMTP Client Has no PTR record
#3: Reject Email if SMTP Client Hostname doesn’t have valid A Record
#4: Reject Email If MAIL FROM Domain Has Neither MX Record Nor A Record
#
smtpd_sender_restrictions =
   permit_mynetworks
   permit_sasl_authenticated
   reject_unknown_sender_domain
   reject_unknown_reverse_client_hostname
   reject_unknown_client_hostname

#
#2: Enable HELO/EHLO Hostname Restrictions in Postfix
#
smtpd_helo_required = yes
smtpd_helo_restrictions =
    permit_mynetworks
    permit_sasl_authenticated
    check_helo_access hash:/srv/etc/postfix/helo_access
    reject_invalid_helo_hostname
    reject_non_fqdn_helo_hostname
    reject_unknown_helo_hostname

#
#5: Enable Greylisting in Postfix
#
# As required by the SMTP protocol, any legitimate SMTP client must be able to
# re-send email if delivery fails. (By default, Postfix is configured to resend
# failed emails many times before it informs the sender that the message could
# not be delivered.) Many spammers usually just send once and would not retry.
#
# Postgrey is a greylisting policy server for Postfix.
#

#
#6: Using Public Anti-Spam Blacklists
#
# Using the freee service of spamhaus.org.
#
#orig:smtpd_recipient_restrictions = permit_sasl_authenticated,permit_mynetworks,reject_unauth_destination
smtpd_recipient_restrictions =
   permit_mynetworks,
   permit_sasl_authenticated,
   reject_unauth_destination,
   check_client_access hash:/srv/etc/postfix/rbl_override,
   reject_rhsbl_helo dbl.spamhaus.org,
   reject_rhsbl_reverse_client dbl.spamhaus.org,
   reject_rhsbl_sender dbl.spamhaus.org,
   reject_rbl_client zen.spamhaus.org

#
#7: Set Up OpenDMARC to Reject Emails That Fail DMARC Check
#
# DMARC (Domain-based Message Authentication, Reporting and Conformance) is an
# Internet standard that allows domain owners to prevent their domain names from
# being used by email spoofers. Please check the following guide.
#
#    Set Up OpenDMARC with Postfix on Ubuntu to Block Email Spoofing/Spam
#
# Don’t be an Open Relay
#

smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination

EOF
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to write common postfix/main.cf!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Enabling \"postfix\" mail-server..." >&2
		systemctl enable postfix
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to enable \"postfix\" mail-server!"
		else
			echo "Successfully enabled \"postfix\" mail-server!" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing specific \"dovecot\" imap-server configuration..." >&2
		mkdir -p /srv/etc/dovecot
		rv=$?
		cp -a ${U2UP_TMP_SRV_DIR}/etc/dovecot/* /srv/etc/dovecot/
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to prepare specific \"dovecot\" imap-server configuration!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing common configuration for \"dovecot\" imap-server..." >&2
		cat > /etc/dovecot/dovecot.conf << EOF
auth_mechanisms = plain cram-md5
auth_verbose = yes
base_dir = /var/run/dovecot/
info_log_path = /var/log/dovecot.info
log_path = /var/log/dovecot
log_timestamp = "%Y-%m-%d %H:%M:%S "
mail_location = maildir:/srv/vmail/%d/%n
passdb {
  args = /srv/etc/dovecot/passwd
  driver = passwd-file
}
protocols = imap lmtp
service auth {
  executable = /usr/libexec/dovecot/auth
  user = root
  # Postfix smtp-auth
  unix_listener /var/spool/postfix/private/auth {
    mode = 0666
    user = postfix
    group = postfix
  }
}
service imap-login {
  chroot = login
  executable = /usr/libexec/dovecot/imap-login
  user = dovecot
}
service imap {
  executable = /usr/libexec/dovecot/imap
}
ssl = no
userdb {
  args = /srv/etc/dovecot/users
  driver = passwd-file
}
service lmtp {
 unix_listener /var/spool/postfix/private/dovecot-lmtp {
   group = postfix
   mode = 0600
   user = postfix
  }
}
valid_chroot_dirs = /var/spool/vmail
EOF
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to write common dovecot/dovecot.conf!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Enabling \"dovecot\" imap-server..." >&2
		systemctl enable dovecot.socket
		(( rv+=$? ))
		systemctl enable dovecot.service
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to enable \"dovecot\" imap-server!"
		else
			echo "Successfully enabled \"dovecot\" imap-server!" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Preparing specific \"fetchmail\" service configuration..." >&2
		mkdir -p /srv/etc
		rv=$?
		if [ $rv -eq 0 ]; then
			if [ -f "${U2UP_TMP_SRV_DIR}/etc/fetchmailrc" ]; then
				cp -p ${U2UP_TMP_SRV_DIR}/etc/fetchmailrc /srv/etc/
				rv=$?
			else
				cp -p /etc/fetchmailrc /srv/etc/
				rv=$?
			fi
		fi
		chmod 600 /srv/etc/fetchmailrc
		(( rv+=$? ))
		chown vmail.vmail /srv/etc/fetchmailrc
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to prepare specific \"fetchmail\" service configuration!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Enabling \"fetchmail\" service..." >&2
		systemctl enable fetchmail.service
		(( rv+=$? ))
		if [ $rv -ne 0 ]; then
			msg="Failed to enable \"fetchmail\" service!"
		else
			echo "Successfully enabled \"fetchmail\" service!" >&2
		fi
	fi
	if [ $rv -ne 0 ]; then
		echo "${msg}" >&2
	fi

	return $rv
}

#
# Prepare a new set of U2UP configuration files to be used
# in upgrade.
# (called only from "upgrade" installer)
#
prepare_u2up_upgrade_configuration() {
	local rv=0
	local conf_dir=$1
	local upgrade_disk_part

	if [ -z "${conf_dir}" ]; then
		return 1
	fi
	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ ! -e "${conf_dir}/${U2UP_KEYMAP_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_KEYMAP_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
	fi
	if [ ! -e "${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_TARGET_DISK_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
		source ${conf_dir}/${U2UP_TARGET_DISK_CONF_FILE}
		case ${u2up_TARGET_PART} in
		${u2up_TARGET_DISK}3)
			upgrade_disk_part=4
			;;
		${u2up_TARGET_DISK}4)
			upgrade_disk_part=3
			;;
		esac
		save_u2up_target_part_selection ${u2up_TARGET_DISK}${upgrade_disk_part} ${conf_dir}
		(( rv+=$? ))
	fi
	if [ ! -e "${conf_dir}/${U2UP_TARGET_HOSTNAME_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_TARGET_HOSTNAME_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
	fi
	if [ ! -e "${conf_dir}/${U2UP_TARGET_ADMIN_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_TARGET_ADMIN_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
	fi
	if [ ! -e "${conf_dir}/${U2UP_NETWORK_EXTERNAL_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_NETWORK_EXTERNAL_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
	fi
	if [ ! -e "${conf_dir}/${U2UP_NETWORK_INTERNAL_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_NETWORK_INTERNAL_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
	fi
	if [ ! -e "${conf_dir}/${U2UP_INSTALL_REPO_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_INSTALL_REPO_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
	fi
	if [ ! -e "${conf_dir}/${U2UP_DOMAIN_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_DOMAIN_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
	fi
	if [ ! -e "${conf_dir}/${U2UP_ACME_ACCOUNT_CONF_FILE}" ]; then
		cp -pf ${U2UP_CONF_DIR}/${U2UP_ACME_ACCOUNT_CONF_FILE} ${conf_dir}/
		(( rv+=$? ))
	fi
	return $rv
}

#
# Check and/or create U2UP defined filesystems.
# New rootfs partition is allways re-created!
# (called from installers - never chrooted)
check_create_filesystems() {
	local u2up_TARGET_DISK=$1
	local u2up_TARGET_PART=$2
	local fstype=""
	local msg=""
	local rv=0

	if [ $rv -eq 0 ] && [ -z "$u2up_TARGET_DISK" ]; then
		msg="Target disk not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ] && [ -z "$u2up_TARGET_PART" ]; then
		msg="Target disk paritition not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ]; then
		# Installation partition:
		echo "Allways re-create EXT4 filesystem on installation partition /dev/$u2up_TARGET_PART:" >&2
		umount -f $U2UP_INSTALL_ROOT_MNT >&2
		mkfs.ext4 -F /dev/$u2up_TARGET_PART >&2
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to re-create EXT4 filesystem on installation partition /dev/$u2up_TARGET_PART!"
#		else
#			echo -e "OK!\n" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		# Boot partition:
		echo "Check / re-create VFAT filesystem on \"boot\" partition /dev/${u2up_TARGET_DISK}1:" >&2
		fstype="$(lsblk -fr /dev/${u2up_TARGET_DISK}1 | grep -v "NAME" | sed 's/[a-z,0-9]* //' | sed 's/ .*//')"
		if [ -z "$fstype" ] || [ "$fstype" != "vfat" ]; then
#			echo "Recreate:" >&2
			mkfs.vfat -F /dev/${u2up_TARGET_DISK}1 >&2
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to check / re-create VFAT filesystem on \"boot\" partition /dev/${u2up_TARGET_DISK}1!"
#			else
#				echo -e "Re-create OK!\n" >&2
			fi
#		else
#			echo -e "Check OK!\n" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		# Log partition:
		echo "Check / re-create EXT4 filesystem on \"log\" partition /dev/${u2up_TARGET_DISK}2:" >&2
		fstype="$(lsblk -fr /dev/${u2up_TARGET_DISK}2 | grep -v "NAME" | sed 's/[a-z,0-9]* //' | sed 's/ .*//')"
		if [ -z "$fstype" ] || [ "$fstype" != "ext4" ]; then
#			echo "Recreate:" >&2
			mkfs.ext4 -F /dev/${u2up_TARGET_DISK}2 >&2
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to check / re-create EXT4 filesystem on \"log\" partition /dev/${u2up_TARGET_DISK}2!"
#			else
#				echo -e "Re-create OK!\n" >&2
			fi
#		else
#			echo -e "Check OK!\n" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		# RootA partition:
		echo "Check / re-create EXT4 filesystem on \"rootA\" partition /dev/${u2up_TARGET_DISK}3:" >&2
		fstype="$(lsblk -fr /dev/${u2up_TARGET_DISK}3 | grep -v "NAME" | sed 's/[a-z,0-9]* //' | sed 's/ .*//')"
		if [ -z "$fstype" ] || [ "$fstype" != "ext4" ]; then
#			echo "Recreate:" >&2
			mkfs.ext4 -F /dev/${u2up_TARGET_DISK}3 >&2
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to check / re-create EXT4 filesystem on \"rootA\" partition /dev/${u2up_TARGET_DISK}3!"
#			else
#				echo -e "Re-create OK!\n" >&2
			fi
#		else
#			echo -e "Check OK!\n" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		# RootB partition:
		echo "Check / re-create EXT4 filesystem on \"rootB\" partition /dev/${u2up_TARGET_DISK}4:" >&2
		fstype="$(lsblk -fr /dev/${u2up_TARGET_DISK}4 | grep -v "NAME" | sed 's/[a-z,0-9]* //' | sed 's/ .*//')"
		if [ -z "$fstype" ] || [ "$fstype" != "ext4" ]; then
#			echo "Recreate:" >&2
			mkfs.ext4 -F /dev/${u2up_TARGET_DISK}4 >&2
			rv=$?
			if [ $rv -ne 0 ]; then
				msg="Failed to check / re-create EXT4 filesystem on \"rootB\" partition /dev/${u2up_TARGET_DISK}4!"
#			else
#				echo -e "Re-create OK!\n" >&2
			fi
#		else
#			echo -e "Check OK!\n" >&2
		fi
	fi
	if [ $rv -eq 0 ]; then
		msg="Checking / re-creating filesystems successfully finished!"
	fi

	echo "${msg}" >&2
	return $rv
}

#
# Initial check of the images bundle for the correctness of checksum, rootfs and
# date-timestamp IDs presence.
# (called from installers - never chrooted)
#
check_images_bundle_initial_content() {
	local msg=""
	local rv=0

	cd ${U2UP_IMAGES_DIR} >&2
	ln -sf ${U2UP_IMAGES_BUNDLE_ARCHIVE} $(cat ${U2UP_IMAGES_BUNDLE_ARCHIVE_SUM} | sed -e 's%^.* %%g')
	sha256sum -c ${U2UP_IMAGES_BUNDLE_ARCHIVE_SUM}
	rv=$?
	if [ $rv -ne 0 ]; then
		msg="Images bundle checksum mismatch!"
	fi
	cd - >&2
	if [ $rv -eq 0 ]; then
		tar tvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} ${U2UP_IDS_CONF_FILE} > /dev/null
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Images bundle not containing: ${U2UP_IDS_CONF_FILE}!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		U2UP_IMAGE_ROOTFS_NAME=$(tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} -O ${U2UP_IDS_CONF_FILE} 2> /dev/null | grep "^local u2up_ROOTFS_NAME" | sed 's/^.*u2up_ROOTFS_NAME\=//')
		if [ -z "${U2UP_IMAGE_ROOTFS_NAME}" ]; then
			msg="Images bundle installation rootfs archive name not set!"
			rv=1
		fi
	fi
	if [ $rv -eq 0 ]; then
		U2UP_IMAGE_ROOTFS_DATETIME=$(tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} -O ${U2UP_IDS_CONF_FILE} 2> /dev/null | grep "^local u2up_ROOTFS_DATETIME" | sed 's/^.*u2up_ROOTFS_DATETIME\=//')
		if [ -z "${U2UP_IMAGE_ROOTFS_DATETIME}" ]; then
			msg="Images bundle installation rootfs archive Date-TimeStamp not set!"
			rv=1
		fi
	fi
	if [ $rv -eq 0 ]; then
		tar tvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} ${U2UP_IMAGE_ROOTFS_NAME}-${MACHINE}.tar.gz
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Images bundle not containing: ${U2UP_IMAGE_ROOTFS_NAME}-${MACHINE}.tar.gz!"
		fi
	fi
	if [ $rv -ne 0 ]; then
		U2UP_IMAGE_ROOTFS_NAME=""
		U2UP_IMAGE_ROOTFS_DATETIME=""
		echo "${msg}" >&2
	fi
	return $rv
}

#
# Mount target partition before extracting "rootfs".
# (called from installers before calling chroot)
#
mount_installation_filesystem() {
	local u2up_TARGET_DISK=$1
	local u2up_TARGET_PART=$2
	local root_part_suffix=$3
	local msg=""
	local rv=0

	echo "Mounting installation partition filesystem..." >&2
	if [ $rv -eq 0 ] && [ -z "$u2up_TARGET_DISK" ]; then
		msg="Target disk not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ] && [ -z "$u2up_TARGET_PART" ]; then
		msg="Target disk paritition not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ] && [ -z "$root_part_suffix" ]; then
		msg="Target root_part_suffix not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ]; then
		umount -f $U2UP_INSTALL_ROOT_MNT >&2
		mkdir -p $U2UP_INSTALL_ROOT_MNT >&2
		mount /dev/$u2up_TARGET_PART $U2UP_INSTALL_ROOT_MNT >&2
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to mount installation partition filesystem (${u2up_TARGET_PART} - root${root_part_suffix})!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		msg="Mounting installation partition filesystem (${u2up_TARGET_PART} - root${root_part_suffix}) successfully finished!"
	fi

	echo "${msg}" >&2
	return $rv
}

#
# Extract just "rootfs" from images bundle to the target partition.
# (called from installers before calling chroot)
#
extract_rootfs_from_images_bundle() {
	local u2up_TARGET_DISK=$1
	local u2up_TARGET_PART=$2
	local root_part_suffix=$3
	local msg=""
	local rv=0

	echo "Extracting root filesystem archive..." >&2
	if [ $rv -eq 0 ] && [ -z "$u2up_TARGET_DISK" ]; then
		msg="Target disk not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ] && [ -z "$u2up_TARGET_PART" ]; then
		msg="Target disk paritition not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ] && [ -z "$root_part_suffix" ]; then
		msg="Target root_part_suffix not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ]; then
		tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} -O ${U2UP_IMAGE_ROOTFS_NAME}-${MACHINE}.tar.gz | tar xz -C $U2UP_INSTALL_ROOT_MNT >&2
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to extract root filesystem archive!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		msg="Extracting root filesystem archive successfully finished!"
	fi

	echo "${msg}" >&2
	return $rv
}

#
# Prepare / call chroot with target update script.
# (called from installer scripts)
#
update_filesystem_chrooted() {
	local msg=""
	local rv=0

	echo "Updating installed system (chrooted)..." >&2
	if [ $rv -eq 0 ]; then
		mount -o bind /dev ${U2UP_INSTALL_ROOT_MNT}/dev
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to mount-bind /dev!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		mount -o bind /dev/shm ${U2UP_INSTALL_ROOT_MNT}/dev/shm
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to mount-bind /dev/shm!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		mount -o bind /proc ${U2UP_INSTALL_ROOT_MNT}/proc
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to mount-bind /proc!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		mount -o bind /sys ${U2UP_INSTALL_ROOT_MNT}/sys
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to mount-bind /sys!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		umount ${U2UP_INSTALL_ROOT_MNT}/${U2UP_TMP_SRV_DIR} >&2
		mkdir -p ${U2UP_INSTALL_ROOT_MNT}/${U2UP_TMP_SRV_DIR} >&2
		mount -o bind /srv ${U2UP_INSTALL_ROOT_MNT}/${U2UP_TMP_SRV_DIR}
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to mount-bind /srv!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		if [ -x "${HOME}/u2up-update-chrooted.sh" ]; then
			echo "WARNING! Using local (chrooted) script!" >&2
			cp -pf ${U2UP_INSTALL_ROOT_MNT}/usr/bin/u2up-update-chrooted.sh ${U2UP_INSTALL_ROOT_MNT}/usr/bin/u2up-update-chrooted.sh_orig
			cp -f ${HOME}/u2up-update-chrooted.sh ${U2UP_INSTALL_ROOT_MNT}/usr/bin/u2up-update-chrooted.sh
		fi
		if [ -f "${HOME}/u2up-install-bash-lib-chrooted" ]; then
			echo "WARNING! Using local (bash-lib-chrooted) script!" >&2
			cp -pf ${U2UP_INSTALL_ROOT_MNT}/lib/u2up/u2up-install-bash-lib ${U2UP_INSTALL_ROOT_MNT}/lib/u2up/u2up-install-bash-lib_orig
			cp -f ${HOME}/u2up-install-bash-lib-chrooted ${U2UP_INSTALL_ROOT_MNT}/lib/u2up/u2up-install-bash-lib
		fi
		chroot ${U2UP_INSTALL_ROOT_MNT} /usr/bin/u2up-update-chrooted.sh
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed executing (chrooted) script!"
		fi
	fi
	umount ${U2UP_INSTALL_ROOT_MNT}${U2UP_TMP_SRV_DIR}
	umount ${U2UP_INSTALL_ROOT_MNT}/sys
	umount ${U2UP_INSTALL_ROOT_MNT}/proc
	umount ${U2UP_INSTALL_ROOT_MNT}/dev/shm
	umount ${U2UP_INSTALL_ROOT_MNT}/dev
	# Mounted explicitly in chrooted env but unmounted here!
	umount ${U2UP_INSTALL_ROOT_MNT}${U2UP_TMP_BOOT_DIR}
	umount ${U2UP_INSTALL_ROOT_MNT}/var/volatile/log
	if [ $rv -ne 0 ]; then
		echo "${msg}" >&2
		echo "Failed to update installation system (chrooted)!" >&2
	else
		echo "Successfully updated installation system (chrooted)!" >&2
	fi

	return $rv 
}

#
# Checks all content of the images bundle beside correctness of the bundle
# checksum.
# (called only chrooted)
#
check_images_bundle_all_content() {
	local msg=""
	local rv=0

	if [ -f "${U2UP_IMAGES_LOCAL_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE}" ]; then
		mv ${U2UP_IMAGES_LOCAL_DIR}/* ${U2UP_IMAGES_DIR}/
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to move local images bundle to common location!"
		fi
	fi
	if [ $rv -eq 0 ] && [ ! -f "${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE}" ]; then
		msg="Images bundle not available!"
		rv=1
	fi
	if [ $rv -eq 0 ]; then
		cd ${U2UP_IMAGES_DIR} >&2
		ln -sf ${U2UP_IMAGES_BUNDLE_ARCHIVE} $(cat ${U2UP_IMAGES_BUNDLE_ARCHIVE_SUM} | sed -e 's%^.* %%g')
		sha256sum -c ${U2UP_IMAGES_BUNDLE_ARCHIVE_SUM}
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Images bundle checksum mismatch!"
		fi
		cd - >&2
	fi
	if [ $rv -eq 0 ]; then
		tar tvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} ${U2UP_IDS_CONF_FILE} 2> /dev/null
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Images bundle not containing: ${U2UP_IDS_CONF_FILE}!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		U2UP_IMAGE_ROOTFS_NAME=$(tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} -O ${U2UP_IDS_CONF_FILE} 2> /dev/null | grep "^local u2up_ROOTFS_NAME" | sed 's/^.*u2up_ROOTFS_NAME\=//')
		if [ -z "${U2UP_IMAGE_ROOTFS_NAME}" ]; then
			msg="Images bundle installation rootfs archive name not set!"
			rv=1
		fi
	fi
	if [ $rv -eq 0 ]; then
		U2UP_IMAGE_ROOTFS_DATETIME=$(tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} -O ${U2UP_IDS_CONF_FILE} 2> /dev/null | grep "^local u2up_ROOTFS_DATETIME" | sed 's/^.*u2up_ROOTFS_DATETIME\=//')
		if [ -z "${U2UP_IMAGE_ROOTFS_DATETIME}" ]; then
			msg="Images bundle installation rootfs archive Date-TimeStamp not set!"
			rv=1
		fi
	fi
	if [ $rv -eq 0 ]; then
		tar tvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} ${U2UP_IMAGE_ROOTFS_NAME}-${MACHINE}.tar.gz
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Images bundle not containing: ${U2UP_IMAGE_ROOTFS_NAME}-${MACHINE}.tar.gz!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		tar tvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} ${U2UP_KERNEL_IMAGE}-${MACHINE}.bin
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Images bundle not containing: ${U2UP_KERNEL_IMAGE}-${MACHINE}.bin!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		tar tvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} ${U2UP_INITRD_IMAGE}.cpio
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Images bundle not containing: ${U2UP_INITRD_IMAGE}.cpio!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		tar tvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} systemd-${U2UP_EFI_FALLBACK_IMAGE}
		rv=$?
		if [ $rv -ne 0 ]; then
			masg="Images bundle not containing: systemd-${U2UP_EFI_FALLBACK_IMAGE}!"
		fi
	fi
	if [ $rv -ne 0 ]; then
		U2UP_IMAGE_ROOTFS_NAME=""
		U2UP_IMAGE_ROOTFS_DATETIME=""
		echo "${msg}" >&2
	fi
	return $rv
}

#
# Extracts remaining content (beside rootfs) from the images bundle.
# (called only chrooted)
#
extract_remaining_from_images_bundle() {
	local root_part_suffix=$1
	local msg=""
	local rv=0

	if [ $rv -eq 0 ] && [ -z "$root_part_suffix" ]; then
		msg="Target root_part_suffix not defined!"
		rv=1
	fi
	if [ $rv -eq 0 ]; then
		echo "Extracting U2UP_IDS..." >&2
		tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} --overwrite -C ${U2UP_CONF_DIR} ${U2UP_IDS_CONF_FILE} >&2
		rv=$?
		if [ $rv -ne 0 ]; then
			msg="Failed to extract U2UP_IDS!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		echo "Extracting installation boot images..." >&2
		mkdir -p ${U2UP_TMP_BOOT_DIR}/EFI/BOOT
		mkdir -p ${U2UP_TMP_BOOT_DIR}/loader/entries
		tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} --no-same-owner --no-same-permissions -C ${U2UP_TMP_BOOT_DIR} ${U2UP_KERNEL_IMAGE}-${MACHINE}.bin >&2
		((rv+=$?))
		mv ${U2UP_TMP_BOOT_DIR}/${U2UP_KERNEL_IMAGE}-${MACHINE}.bin ${U2UP_TMP_BOOT_DIR}/bzImage${root_part_suffix} >&2
		((rv+=$?))
		tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} --no-same-owner --no-same-permissions -C ${U2UP_TMP_BOOT_DIR} ${U2UP_INITRD_IMAGE}.cpio >&2
		((rv+=$?))
		mv ${U2UP_TMP_BOOT_DIR}/${U2UP_INITRD_IMAGE}.cpio ${U2UP_TMP_BOOT_DIR}/microcode${root_part_suffix}.cpio >&2
		((rv+=$?))
		if [ ! -f "${U2UP_TMP_BOOT_DIR}/EFI/BOOT/bootx64.efi" ]; then
			tar xvf ${U2UP_IMAGES_DIR}/${U2UP_IMAGES_BUNDLE_ARCHIVE} --no-same-owner --no-same-permissions -C ${U2UP_TMP_BOOT_DIR}/EFI/BOOT systemd-${U2UP_EFI_FALLBACK_IMAGE} >&2
			((rv+=$?))
			mv ${U2UP_TMP_BOOT_DIR}/EFI/BOOT/systemd-${U2UP_EFI_FALLBACK_IMAGE} ${U2UP_TMP_BOOT_DIR}/EFI/BOOT/${U2UP_EFI_FALLBACK_IMAGE} >&2
			((rv+=$?))
		fi
		if [ $rv -ne 0 ]; then
			msg="Failed to extract installation boot images!"
		fi
	fi
	if [ $rv -eq 0 ]; then
		msg="Extracting installation images successfully finished!"
	fi

	echo "${msg}" >&2
	return $rv
}

#
# Transfer new U2UP images bundle archive to the mounted target
# filesystem before calling "chroot"!
# (called from "first install" installer only)
# ("upgrade" installer shares the bundle via common partition)
#
populate_u2up_images_bundle() {
	local root_path_prefix=${1:-${U2UP_INSTALL_ROOT_MNT}}
	local images_dir=${2:-${U2UP_IMAGES_DIR}}
	local images_name=${3:-${U2UP_IMAGES_BUNDLE_NAME}}
	local rv=0

	if [ ! -d "${images_dir}" ]; then
		return 1
	fi
	if [ -z "$root_path_prefix" ]; then
		return 1
	fi
	rm -rf ${root_path_prefix}${images_dir}
	mkdir -p ${root_path_prefix}${images_dir}
	cp -pf ${images_dir}/${images_name}* ${root_path_prefix}${images_dir}/
	rv=$?
	return $rv
}

#
# Transfer new U2UP configuration files to the mounted target
# filesystem before calling "chroot"!
# (called from "first install" and "upgrade" installers)
#
populate_u2up_configurations() {
	local root_path_prefix=$1
	local conf_dir=${2:-${U2UP_CONF_DIR}}
	local file=""
	local rv=0

	if [ ! -d "${conf_dir}" ]; then
		return 1
	fi
	if [ -z "$root_path_prefix" ]; then
		return 1
	fi
	rm -rf ${root_path_prefix}${U2UP_CONF_DIR}
	mkdir -p $(dirname ${root_path_prefix}${U2UP_CONF_DIR})
	cp -a ${conf_dir} ${root_path_prefix}${U2UP_CONF_DIR}
	rv=$?
#	if [ $rv -eq 0 ]; then
#		for file in $(ls ${root_path_prefix}${U2UP_CONF_DIR}); do
#			set_target_done_for ${root_path_prefix}${U2UP_CONF_DIR}/${file} 0
#			rv=$?
#		done
#	fi
	return $rv
}

#
# Finalize configuration during the first boot.
# (used in "u2up-pre-config.sh")
# (OBSOLETE)
#
evaluate_u2up_configurations() {
#set -x
	local file=""
	local rv=0
	if [ ! -d "${U2UP_CONF_DIR}" ]; then
		return 1
	fi
	for file in $(ls ${U2UP_CONF_DIR}); do
		case $file in
		${U2UP_KEYMAP_CONF_FILE})
#			configure_u2up_keymap_selection
#			rv=$?
			;;
		${U2UP_TARGET_DISK_CONF_FILE})
			;;
		${U2UP_TARGET_HOSTNAME_CONF_FILE})
#			configure_u2up_target_hostname_selection
#			rv=$?
			;;
		${U2UP_TARGET_ADMIN_CONF_FILE})
#			configure_u2up_target_admin_selection
#			rv=$?
			;;
		${U2UP_NETWORK_EXTERNAL_CONF_FILE})
#			configure_u2up_net_segment ${U2UP_CONF_DIR} External
#			rv=$?
			;;
		${U2UP_NETWORK_INTERNAL_CONF_FILE})
#			configure_u2up_net_segment ${U2UP_CONF_DIR} Internal
#			rv=$?
			;;
		${U2UP_INSTALL_REPO_CONF_FILE})
#			configure_u2up_install_repo_selection
#			rv=$?
			;;
		esac
	done
	return $rv
}

